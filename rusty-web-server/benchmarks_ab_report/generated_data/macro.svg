<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="581.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="6411"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0156%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0156%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0156%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0156%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__accept (91 samples, 1.42%)</title><rect x="0.0624%" y="405" width="1.4194%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="91"/><text x="0.3124%" y="415.50"></text></g><g><title>run`DYLD-STUB$$ioctl (2 samples, 0.03%)</title><rect x="1.4818%" y="405" width="0.0312%" height="15" fill="rgb(232,128,0)" fg:x="95" fg:w="2"/><text x="1.7318%" y="415.50"></text></g><g><title>run`&lt;std::net::tcp::Incoming as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 1.70%)</title><rect x="0.0156%" y="437" width="1.7002%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="109"/><text x="0.2656%" y="447.50"></text></g><g><title>run`std::net::tcp::TcpListener::accept (107 samples, 1.67%)</title><rect x="0.0468%" y="421" width="1.6690%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="107"/><text x="0.2968%" y="431.50"></text></g><g><title>run`std::sys::unix::net::Socket::accept (13 samples, 0.20%)</title><rect x="1.5130%" y="405" width="0.2028%" height="15" fill="rgb(218,30,26)" fg:x="97" fg:w="13"/><text x="1.7630%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (12 samples, 0.19%)</title><rect x="1.5286%" y="389" width="0.1872%" height="15" fill="rgb(220,122,19)" fg:x="98" fg:w="12"/><text x="1.7786%" y="399.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (1 samples, 0.02%)</title><rect x="1.7158%" y="373" width="0.0156%" height="15" fill="rgb(250,228,42)" fg:x="110" fg:w="1"/><text x="1.9658%" y="383.50"></text></g><g><title>libsystem_info.dylib`_gai_sort_list (1 samples, 0.02%)</title><rect x="1.7158%" y="357" width="0.0156%" height="15" fill="rgb(240,193,28)" fg:x="110" fg:w="1"/><text x="1.9658%" y="367.50"></text></g><g><title>libsystem_c.dylib`_qsort (1 samples, 0.02%)</title><rect x="1.7158%" y="341" width="0.0156%" height="15" fill="rgb(216,20,37)" fg:x="110" fg:w="1"/><text x="1.9658%" y="351.50"></text></g><g><title>libsystem_c.dylib`_isort (1 samples, 0.02%)</title><rect x="1.7158%" y="325" width="0.0156%" height="15" fill="rgb(206,188,39)" fg:x="110" fg:w="1"/><text x="1.9658%" y="335.50"></text></g><g><title>libsystem_info.dylib`si_destination_compare (1 samples, 0.02%)</title><rect x="1.7158%" y="309" width="0.0156%" height="15" fill="rgb(217,207,13)" fg:x="110" fg:w="1"/><text x="1.9658%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (1 samples, 0.02%)</title><rect x="1.7158%" y="293" width="0.0156%" height="15" fill="rgb(231,73,38)" fg:x="110" fg:w="1"/><text x="1.9658%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (1 samples, 0.02%)</title><rect x="1.7158%" y="277" width="0.0156%" height="15" fill="rgb(225,20,46)" fg:x="110" fg:w="1"/><text x="1.9658%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (1 samples, 0.02%)</title><rect x="1.7158%" y="261" width="0.0156%" height="15" fill="rgb(210,31,41)" fg:x="110" fg:w="1"/><text x="1.9658%" y="271.50"></text></g><g><title>libsystem_info.dylib`si_destination_compare_init_once (1 samples, 0.02%)</title><rect x="1.7158%" y="245" width="0.0156%" height="15" fill="rgb(221,200,47)" fg:x="110" fg:w="1"/><text x="1.9658%" y="255.50"></text></g><g><title>libsystem_trace.dylib`os_log_create (1 samples, 0.02%)</title><rect x="1.7158%" y="229" width="0.0156%" height="15" fill="rgb(226,26,5)" fg:x="110" fg:w="1"/><text x="1.9658%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="1.7158%" y="213" width="0.0156%" height="15" fill="rgb(249,33,26)" fg:x="110" fg:w="1"/><text x="1.9658%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="1.7158%" y="197" width="0.0156%" height="15" fill="rgb(235,183,28)" fg:x="110" fg:w="1"/><text x="1.9658%" y="207.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_init_slow (1 samples, 0.02%)</title><rect x="1.7158%" y="181" width="0.0156%" height="15" fill="rgb(221,5,38)" fg:x="110" fg:w="1"/><text x="1.9658%" y="191.50"></text></g><g><title>libxpc.dylib`xpc_bundle_get_info_dictionary (1 samples, 0.02%)</title><rect x="1.7158%" y="165" width="0.0156%" height="15" fill="rgb(247,18,42)" fg:x="110" fg:w="1"/><text x="1.9658%" y="175.50"></text></g><g><title>libxpc.dylib`_xpc_bundle_resolve (1 samples, 0.02%)</title><rect x="1.7158%" y="149" width="0.0156%" height="15" fill="rgb(241,131,45)" fg:x="110" fg:w="1"/><text x="1.9658%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="1.7158%" y="133" width="0.0156%" height="15" fill="rgb(249,31,29)" fg:x="110" fg:w="1"/><text x="1.9658%" y="143.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="1.7158%" y="117" width="0.0156%" height="15" fill="rgb(225,111,53)" fg:x="110" fg:w="1"/><text x="1.9658%" y="127.50"></text></g><g><title>libxpc.dylib`___xpc_bundle_resolve_block_invoke (1 samples, 0.02%)</title><rect x="1.7158%" y="101" width="0.0156%" height="15" fill="rgb(238,160,17)" fg:x="110" fg:w="1"/><text x="1.9658%" y="111.50"></text></g><g><title>libxpc.dylib`_xpc_bundle_resolve_sync (1 samples, 0.02%)</title><rect x="1.7158%" y="85" width="0.0156%" height="15" fill="rgb(214,148,48)" fg:x="110" fg:w="1"/><text x="1.9658%" y="95.50"></text></g><g><title>libxpc.dylib`_xpc_bundle_resolve_root (1 samples, 0.02%)</title><rect x="1.7158%" y="69" width="0.0156%" height="15" fill="rgb(232,36,49)" fg:x="110" fg:w="1"/><text x="1.9658%" y="79.50"></text></g><g><title>libxpc.dylib`_resolve_and_stat_path (1 samples, 0.02%)</title><rect x="1.7158%" y="53" width="0.0156%" height="15" fill="rgb(209,103,24)" fg:x="110" fg:w="1"/><text x="1.9658%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="1.7158%" y="37" width="0.0156%" height="15" fill="rgb(229,88,8)" fg:x="110" fg:w="1"/><text x="1.9658%" y="47.50"></text></g><g><title>run`std::net::tcp::TcpListener::bind (2 samples, 0.03%)</title><rect x="1.7158%" y="437" width="0.0312%" height="15" fill="rgb(213,181,19)" fg:x="110" fg:w="2"/><text x="1.9658%" y="447.50"></text></g><g><title>run`&lt;str as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (2 samples, 0.03%)</title><rect x="1.7158%" y="421" width="0.0312%" height="15" fill="rgb(254,191,54)" fg:x="110" fg:w="2"/><text x="1.9658%" y="431.50"></text></g><g><title>run`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (2 samples, 0.03%)</title><rect x="1.7158%" y="405" width="0.0312%" height="15" fill="rgb(241,83,37)" fg:x="110" fg:w="2"/><text x="1.9658%" y="415.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (2 samples, 0.03%)</title><rect x="1.7158%" y="389" width="0.0312%" height="15" fill="rgb(233,36,39)" fg:x="110" fg:w="2"/><text x="1.9658%" y="399.50"></text></g><g><title>libsystem_info.dylib`si_module_with_name (1 samples, 0.02%)</title><rect x="1.7314%" y="373" width="0.0156%" height="15" fill="rgb(226,3,54)" fg:x="111" fg:w="1"/><text x="1.9814%" y="383.50"></text></g><g><title>libsystem_info.dylib`si_module_static_search (1 samples, 0.02%)</title><rect x="1.7314%" y="357" width="0.0156%" height="15" fill="rgb(245,192,40)" fg:x="111" fg:w="1"/><text x="1.9814%" y="367.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="1.7314%" y="341" width="0.0156%" height="15" fill="rgb(238,167,29)" fg:x="111" fg:w="1"/><text x="1.9814%" y="351.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="1.7314%" y="325" width="0.0156%" height="15" fill="rgb(232,182,51)" fg:x="111" fg:w="1"/><text x="1.9814%" y="335.50"></text></g><g><title>libsystem_info.dylib`__si_module_static_search_block_invoke (1 samples, 0.02%)</title><rect x="1.7314%" y="309" width="0.0156%" height="15" fill="rgb(231,60,39)" fg:x="111" fg:w="1"/><text x="1.9814%" y="319.50"></text></g><g><title>libsystem_info.dylib`si_module_config_modules_for_category (1 samples, 0.02%)</title><rect x="1.7314%" y="293" width="0.0156%" height="15" fill="rgb(208,69,12)" fg:x="111" fg:w="1"/><text x="1.9814%" y="303.50"></text></g><g><title>libsystem_info.dylib`si_module_with_name (1 samples, 0.02%)</title><rect x="1.7314%" y="277" width="0.0156%" height="15" fill="rgb(235,93,37)" fg:x="111" fg:w="1"/><text x="1.9814%" y="287.50"></text></g><g><title>libsystem_info.dylib`si_module_static_ds (1 samples, 0.02%)</title><rect x="1.7314%" y="261" width="0.0156%" height="15" fill="rgb(213,116,39)" fg:x="111" fg:w="1"/><text x="1.9814%" y="271.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="1.7314%" y="245" width="0.0156%" height="15" fill="rgb(222,207,29)" fg:x="111" fg:w="1"/><text x="1.9814%" y="255.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="1.7314%" y="229" width="0.0156%" height="15" fill="rgb(206,96,30)" fg:x="111" fg:w="1"/><text x="1.9814%" y="239.50"></text></g><g><title>libsystem_info.dylib`__si_module_static_ds_block_invoke (1 samples, 0.02%)</title><rect x="1.7314%" y="213" width="0.0156%" height="15" fill="rgb(218,138,4)" fg:x="111" fg:w="1"/><text x="1.9814%" y="223.50"></text></g><g><title>libsystem_notify.dylib`notify_register_check (1 samples, 0.02%)</title><rect x="1.7314%" y="197" width="0.0156%" height="15" fill="rgb(250,191,14)" fg:x="111" fg:w="1"/><text x="1.9814%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.02%)</title><rect x="1.7314%" y="181" width="0.0156%" height="15" fill="rgb(239,60,40)" fg:x="111" fg:w="1"/><text x="1.9814%" y="191.50"></text></g><g><title>dyld`start (115 samples, 1.79%)</title><rect x="0.0000%" y="533" width="1.7938%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="115"/><text x="0.2500%" y="543.50">d..</text></g><g><title>run`main (115 samples, 1.79%)</title><rect x="0.0000%" y="517" width="1.7938%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="115"/><text x="0.2500%" y="527.50">r..</text></g><g><title>run`std::rt::lang_start_internal (115 samples, 1.79%)</title><rect x="0.0000%" y="501" width="1.7938%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="115"/><text x="0.2500%" y="511.50">r..</text></g><g><title>run`std::rt::lang_start::_{{closure}} (115 samples, 1.79%)</title><rect x="0.0000%" y="485" width="1.7938%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="115"/><text x="0.2500%" y="495.50">r..</text></g><g><title>run`std::sys_common::backtrace::__rust_begin_short_backtrace (115 samples, 1.79%)</title><rect x="0.0000%" y="469" width="1.7938%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="115"/><text x="0.2500%" y="479.50">r..</text></g><g><title>run`&lt;rusty_web_server::server::macro_server::MacroServer as rusty_web_server::WebServer&gt;::run (115 samples, 1.79%)</title><rect x="0.0000%" y="453" width="1.7938%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="115"/><text x="0.2500%" y="463.50">r..</text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (3 samples, 0.05%)</title><rect x="1.7470%" y="437" width="0.0468%" height="15" fill="rgb(251,118,11)" fg:x="112" fg:w="3"/><text x="1.9970%" y="447.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::send (3 samples, 0.05%)</title><rect x="1.7470%" y="421" width="0.0468%" height="15" fill="rgb(217,147,25)" fg:x="112" fg:w="3"/><text x="1.9970%" y="431.50"></text></g><g><title>run`std::sync::mpsc::blocking::SignalToken::signal (3 samples, 0.05%)</title><rect x="1.7470%" y="405" width="0.0468%" height="15" fill="rgb(247,81,37)" fg:x="112" fg:w="3"/><text x="1.9970%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.03%)</title><rect x="1.7626%" y="389" width="0.0312%" height="15" fill="rgb(209,12,38)" fg:x="113" fg:w="2"/><text x="2.0126%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (522 samples, 8.14%)</title><rect x="1.7938%" y="533" width="8.1423%" height="15" fill="rgb(227,1,9)" fg:x="115" fg:w="522"/><text x="2.0438%" y="543.50">libsystem_k..</text></g><g><title>libsystem_kernel.dylib`__thread_selfid (13 samples, 0.20%)</title><rect x="13.4768%" y="517" width="0.2028%" height="15" fill="rgb(248,47,43)" fg:x="864" fg:w="13"/><text x="13.7268%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.02%)</title><rect x="13.6796%" y="517" width="0.0156%" height="15" fill="rgb(221,10,30)" fg:x="877" fg:w="1"/><text x="13.9296%" y="527.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sigaltstack (2 samples, 0.03%)</title><rect x="13.6952%" y="501" width="0.0312%" height="15" fill="rgb(210,229,1)" fg:x="878" fg:w="2"/><text x="13.9452%" y="511.50"></text></g><g><title>libsystem_c.dylib`sysconf (5 samples, 0.08%)</title><rect x="13.7264%" y="501" width="0.0780%" height="15" fill="rgb(222,148,37)" fg:x="880" fg:w="5"/><text x="13.9764%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (31 samples, 0.48%)</title><rect x="13.8044%" y="501" width="0.4835%" height="15" fill="rgb(234,67,33)" fg:x="885" fg:w="31"/><text x="14.0544%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1,811 samples, 28.25%)</title><rect x="14.2879%" y="501" width="28.2483%" height="15" fill="rgb(247,98,35)" fg:x="916" fg:w="1811"/><text x="14.5379%" y="511.50">libsystem_kernel.dylib`__munmap</text></g><g><title>libsystem_kernel.dylib`__sigaltstack (109 samples, 1.70%)</title><rect x="42.5363%" y="501" width="1.7002%" height="15" fill="rgb(247,138,52)" fg:x="2727" fg:w="109"/><text x="42.7863%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="44.2365%" y="501" width="0.0156%" height="15" fill="rgb(213,79,30)" fg:x="2836" fg:w="1"/><text x="44.4865%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__disable_threadsignal (1 samples, 0.02%)</title><rect x="44.2521%" y="501" width="0.0156%" height="15" fill="rgb(246,177,23)" fg:x="2837" fg:w="1"/><text x="44.5021%" y="511.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (2 samples, 0.03%)</title><rect x="44.3301%" y="485" width="0.0312%" height="15" fill="rgb(230,62,27)" fg:x="2842" fg:w="2"/><text x="44.5801%" y="495.50"></text></g><g><title>libdyld.dylib`dyld4::finalizeListTLV_thunk (1 samples, 0.02%)</title><rect x="44.3613%" y="485" width="0.0156%" height="15" fill="rgb(216,154,8)" fg:x="2844" fg:w="1"/><text x="44.6113%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (853 samples, 13.31%)</title><rect x="44.3769%" y="469" width="13.3053%" height="15" fill="rgb(244,35,45)" fg:x="2845" fg:w="853"/><text x="44.6269%" y="479.50">libsystem_kernel.dyl..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (3 samples, 0.05%)</title><rect x="57.6821%" y="469" width="0.0468%" height="15" fill="rgb(251,115,12)" fg:x="3698" fg:w="3"/><text x="57.9321%" y="479.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (2 samples, 0.03%)</title><rect x="57.7289%" y="469" width="0.0312%" height="15" fill="rgb(240,54,50)" fg:x="3701" fg:w="2"/><text x="57.9789%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__bsdthread_terminate (1 samples, 0.02%)</title><rect x="57.7601%" y="469" width="0.0156%" height="15" fill="rgb(233,84,52)" fg:x="3703" fg:w="1"/><text x="58.0101%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (5 samples, 0.08%)</title><rect x="57.7913%" y="453" width="0.0780%" height="15" fill="rgb(207,117,47)" fg:x="3705" fg:w="5"/><text x="58.0413%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.02%)</title><rect x="57.8693%" y="453" width="0.0156%" height="15" fill="rgb(249,43,39)" fg:x="3710" fg:w="1"/><text x="58.1193%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`mach_port_mod_refs (1 samples, 0.02%)</title><rect x="57.8849%" y="453" width="0.0156%" height="15" fill="rgb(209,38,44)" fg:x="3711" fg:w="1"/><text x="58.1349%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_mod_refs_trap (156 samples, 2.43%)</title><rect x="57.9317%" y="437" width="2.4333%" height="15" fill="rgb(236,212,23)" fg:x="3714" fg:w="156"/><text x="58.1817%" y="447.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (1,028 samples, 16.03%)</title><rect x="44.3769%" y="485" width="16.0349%" height="15" fill="rgb(242,79,21)" fg:x="2845" fg:w="1028"/><text x="44.6269%" y="495.50">libsystem_pthread.dylib`_..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (169 samples, 2.64%)</title><rect x="57.7757%" y="469" width="2.6361%" height="15" fill="rgb(211,96,35)" fg:x="3704" fg:w="169"/><text x="58.0257%" y="479.50">li..</text></g><g><title>libsystem_kernel.dylib`mig_dealloc_reply_port (161 samples, 2.51%)</title><rect x="57.9005%" y="453" width="2.5113%" height="15" fill="rgb(253,215,40)" fg:x="3712" fg:w="161"/><text x="58.1505%" y="463.50">li..</text></g><g><title>libsystem_kernel.dylib`mach_port_mod_refs (3 samples, 0.05%)</title><rect x="60.3650%" y="437" width="0.0468%" height="15" fill="rgb(211,81,21)" fg:x="3870" fg:w="3"/><text x="60.6150%" y="447.50"></text></g><g><title>dyld`dyld4::RuntimeState::TLV_TerminatorList::reverseWalkChain(void (1 samples, 0.02%)</title><rect x="61.5505%" y="469" width="0.0156%" height="15" fill="rgb(208,190,38)" fg:x="3946" fg:w="1"/><text x="61.8005%" y="479.50"></text></g><g><title>dyld`dyld4::RuntimeState::TLV_TerminatorList::reverseWalkChain(void (6 samples, 0.09%)</title><rect x="61.5817%" y="453" width="0.0936%" height="15" fill="rgb(235,213,38)" fg:x="3948" fg:w="6"/><text x="61.8317%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="61.6908%" y="437" width="0.0156%" height="15" fill="rgb(237,122,38)" fg:x="3955" fg:w="1"/><text x="61.9408%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="61.7064%" y="437" width="0.0156%" height="15" fill="rgb(244,218,35)" fg:x="3956" fg:w="1"/><text x="61.9564%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="62.0652%" y="421" width="0.0312%" height="15" fill="rgb(240,68,47)" fg:x="3979" fg:w="2"/><text x="62.3152%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="62.0652%" y="405" width="0.0312%" height="15" fill="rgb(210,16,53)" fg:x="3979" fg:w="2"/><text x="62.3152%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="62.0964%" y="421" width="0.0156%" height="15" fill="rgb(235,124,12)" fg:x="3981" fg:w="1"/><text x="62.3464%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.09%)</title><rect x="62.1120%" y="421" width="0.0936%" height="15" fill="rgb(224,169,11)" fg:x="3982" fg:w="6"/><text x="62.3620%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="62.2056%" y="421" width="0.0468%" height="15" fill="rgb(250,166,2)" fg:x="3988" fg:w="3"/><text x="62.4556%" y="431.50"></text></g><g><title>run`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="62.2524%" y="421" width="0.0156%" height="15" fill="rgb(242,216,29)" fg:x="3991" fg:w="1"/><text x="62.5024%" y="431.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (49 samples, 0.76%)</title><rect x="61.6752%" y="453" width="0.7643%" height="15" fill="rgb(230,116,27)" fg:x="3954" fg:w="49"/><text x="61.9252%" y="463.50"></text></g><g><title>run`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (46 samples, 0.72%)</title><rect x="61.7220%" y="437" width="0.7175%" height="15" fill="rgb(228,99,48)" fg:x="3957" fg:w="46"/><text x="61.9720%" y="447.50"></text></g><g><title>run`std::sys_common::thread_info::THREAD_INFO::__getit::destroy (11 samples, 0.17%)</title><rect x="62.2680%" y="421" width="0.1716%" height="15" fill="rgb(253,11,6)" fg:x="3992" fg:w="11"/><text x="62.5180%" y="431.50"></text></g><g><title>libdyld.dylib`DYLD-STUB$$pthread_getspecific (1 samples, 0.02%)</title><rect x="62.4396%" y="453" width="0.0156%" height="15" fill="rgb(247,143,39)" fg:x="4003" fg:w="1"/><text x="62.6896%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="62.4552%" y="453" width="0.0156%" height="15" fill="rgb(236,97,10)" fg:x="4004" fg:w="1"/><text x="62.7052%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="62.4552%" y="437" width="0.0156%" height="15" fill="rgb(233,208,19)" fg:x="4004" fg:w="1"/><text x="62.7052%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.06%)</title><rect x="62.4708%" y="453" width="0.0624%" height="15" fill="rgb(216,164,2)" fg:x="4005" fg:w="4"/><text x="62.7208%" y="463.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (65 samples, 1.01%)</title><rect x="61.5661%" y="469" width="1.0139%" height="15" fill="rgb(220,129,5)" fg:x="3947" fg:w="65"/><text x="61.8161%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (3 samples, 0.05%)</title><rect x="62.5331%" y="453" width="0.0468%" height="15" fill="rgb(242,17,10)" fg:x="4009" fg:w="3"/><text x="62.7831%" y="463.50"></text></g><g><title>libdyld.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="62.5799%" y="469" width="0.0156%" height="15" fill="rgb(242,107,0)" fg:x="4012" fg:w="1"/><text x="62.8299%" y="479.50"></text></g><g><title>libdyld.dylib`dyld4::finalizeListTLV_thunk (2 samples, 0.03%)</title><rect x="62.5955%" y="469" width="0.0312%" height="15" fill="rgb(251,28,31)" fg:x="4013" fg:w="2"/><text x="62.8455%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.08%)</title><rect x="62.6267%" y="469" width="0.0780%" height="15" fill="rgb(233,223,10)" fg:x="4015" fg:w="5"/><text x="62.8767%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.06%)</title><rect x="62.6423%" y="453" width="0.0624%" height="15" fill="rgb(215,21,27)" fg:x="4016" fg:w="4"/><text x="62.8923%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="62.7047%" y="469" width="0.0156%" height="15" fill="rgb(232,23,21)" fg:x="4020" fg:w="1"/><text x="62.9547%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1,184 samples, 18.47%)</title><rect x="44.2677%" y="501" width="18.4683%" height="15" fill="rgb(244,5,23)" fg:x="2838" fg:w="1184"/><text x="44.5177%" y="511.50">libsystem_pthread.dylib`_pthr..</text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (149 samples, 2.32%)</title><rect x="60.4118%" y="485" width="2.3241%" height="15" fill="rgb(226,81,46)" fg:x="3873" fg:w="149"/><text x="60.6618%" y="495.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="62.7203%" y="469" width="0.0156%" height="15" fill="rgb(247,70,30)" fg:x="4021" fg:w="1"/><text x="62.9703%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_setcancelstate_exit (4 samples, 0.06%)</title><rect x="62.7359%" y="501" width="0.0624%" height="15" fill="rgb(212,68,19)" fg:x="4022" fg:w="4"/><text x="62.9859%" y="511.50"></text></g><g><title>run`DYLD-STUB$$sysconf (1 samples, 0.02%)</title><rect x="62.7983%" y="501" width="0.0156%" height="15" fill="rgb(240,187,13)" fg:x="4026" fg:w="1"/><text x="63.0483%" y="511.50"></text></g><g><title>run`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.02%)</title><rect x="62.8139%" y="501" width="0.0156%" height="15" fill="rgb(223,113,26)" fg:x="4027" fg:w="1"/><text x="63.0639%" y="511.50"></text></g><g><title>run`std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.02%)</title><rect x="62.8295%" y="501" width="0.0156%" height="15" fill="rgb(206,192,2)" fg:x="4028" fg:w="1"/><text x="63.0795%" y="511.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sigaltstack (1 samples, 0.02%)</title><rect x="63.0011%" y="485" width="0.0156%" height="15" fill="rgb(241,108,4)" fg:x="4039" fg:w="1"/><text x="63.2511%" y="495.50"></text></g><g><title>libsystem_c.dylib`sigaltstack (2 samples, 0.03%)</title><rect x="63.0167%" y="485" width="0.0312%" height="15" fill="rgb(247,173,49)" fg:x="4040" fg:w="2"/><text x="63.2667%" y="495.50"></text></g><g><title>libsystem_c.dylib`sysconf (9 samples, 0.14%)</title><rect x="63.0479%" y="485" width="0.1404%" height="15" fill="rgb(224,114,35)" fg:x="4042" fg:w="9"/><text x="63.2979%" y="495.50"></text></g><g><title>libsystem_c.dylib`getpagesize (3 samples, 0.05%)</title><rect x="63.1415%" y="469" width="0.0468%" height="15" fill="rgb(245,159,27)" fg:x="4048" fg:w="3"/><text x="63.3915%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (65 samples, 1.01%)</title><rect x="63.1883%" y="485" width="1.0139%" height="15" fill="rgb(245,172,44)" fg:x="4051" fg:w="65"/><text x="63.4383%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (27 samples, 0.42%)</title><rect x="64.2022%" y="485" width="0.4212%" height="15" fill="rgb(236,23,11)" fg:x="4116" fg:w="27"/><text x="64.4522%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`munmap (2 samples, 0.03%)</title><rect x="64.6233%" y="485" width="0.0312%" height="15" fill="rgb(205,117,38)" fg:x="4143" fg:w="2"/><text x="64.8733%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.19%)</title><rect x="64.6701%" y="469" width="0.1872%" height="15" fill="rgb(237,72,25)" fg:x="4146" fg:w="12"/><text x="64.9201%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.22%)</title><rect x="64.6545%" y="485" width="0.2184%" height="15" fill="rgb(244,70,9)" fg:x="4145" fg:w="14"/><text x="64.9045%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="64.8573%" y="469" width="0.0156%" height="15" fill="rgb(217,125,39)" fg:x="4158" fg:w="1"/><text x="65.1073%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="64.8729%" y="485" width="0.0156%" height="15" fill="rgb(235,36,10)" fg:x="4159" fg:w="1"/><text x="65.1229%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.12%)</title><rect x="64.8885%" y="485" width="0.1248%" height="15" fill="rgb(251,123,47)" fg:x="4160" fg:w="8"/><text x="65.1385%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.03%)</title><rect x="65.0133%" y="485" width="0.0312%" height="15" fill="rgb(221,13,13)" fg:x="4168" fg:w="2"/><text x="65.2633%" y="495.50"></text></g><g><title>run`DYLD-STUB$$mmap (1 samples, 0.02%)</title><rect x="65.0445%" y="485" width="0.0156%" height="15" fill="rgb(238,131,9)" fg:x="4170" fg:w="1"/><text x="65.2945%" y="495.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (1 samples, 0.02%)</title><rect x="65.4812%" y="469" width="0.0156%" height="15" fill="rgb(211,50,8)" fg:x="4198" fg:w="1"/><text x="65.7312%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.03%)</title><rect x="65.4968%" y="469" width="0.0312%" height="15" fill="rgb(245,182,24)" fg:x="4199" fg:w="2"/><text x="65.7468%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.06%)</title><rect x="65.5280%" y="469" width="0.0624%" height="15" fill="rgb(242,14,37)" fg:x="4201" fg:w="4"/><text x="65.7780%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="65.5904%" y="469" width="0.0156%" height="15" fill="rgb(246,228,12)" fg:x="4205" fg:w="1"/><text x="65.8404%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stackaddr_np (1 samples, 0.02%)</title><rect x="65.6060%" y="469" width="0.0156%" height="15" fill="rgb(213,55,15)" fg:x="4206" fg:w="1"/><text x="65.8560%" y="479.50"></text></g><g><title>run`DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="65.6216%" y="469" width="0.0312%" height="15" fill="rgb(209,9,3)" fg:x="4207" fg:w="2"/><text x="65.8716%" y="479.50"></text></g><g><title>run`__rdl_alloc (1 samples, 0.02%)</title><rect x="65.6528%" y="469" width="0.0156%" height="15" fill="rgb(230,59,30)" fg:x="4209" fg:w="1"/><text x="65.9028%" y="479.50"></text></g><g><title>run`__rdl_dealloc (4 samples, 0.06%)</title><rect x="65.6684%" y="469" width="0.0624%" height="15" fill="rgb(209,121,21)" fg:x="4210" fg:w="4"/><text x="65.9184%" y="479.50"></text></g><g><title>run`__rust_alloc (1 samples, 0.02%)</title><rect x="65.7308%" y="469" width="0.0156%" height="15" fill="rgb(220,109,13)" fg:x="4214" fg:w="1"/><text x="65.9808%" y="479.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;&lt;rusty_junctions::patterns::n4ary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire::{{closure}}&gt; (4 samples, 0.06%)</title><rect x="65.7464%" y="469" width="0.0624%" height="15" fill="rgb(232,18,1)" fg:x="4215" fg:w="4"/><text x="65.9964%" y="479.50"></text></g><g><title>run`rusty_junctions::function_transforms::unary::transform_send::_{{closure}} (1 samples, 0.02%)</title><rect x="65.8088%" y="469" width="0.0156%" height="15" fill="rgb(215,41,42)" fg:x="4219" fg:w="1"/><text x="66.0588%" y="479.50"></text></g><g><title>run`std::sys::unix::thread::guard::current (1 samples, 0.02%)</title><rect x="65.8244%" y="469" width="0.0156%" height="15" fill="rgb(224,123,36)" fg:x="4220" fg:w="1"/><text x="66.0744%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stackaddr_np (1 samples, 0.02%)</title><rect x="65.8244%" y="453" width="0.0156%" height="15" fill="rgb(240,125,3)" fg:x="4220" fg:w="1"/><text x="66.0744%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="65.9803%" y="453" width="0.0156%" height="15" fill="rgb(205,98,50)" fg:x="4230" fg:w="1"/><text x="66.2303%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.59%)</title><rect x="65.9959%" y="453" width="0.5927%" height="15" fill="rgb(205,185,37)" fg:x="4231" fg:w="38"/><text x="66.2459%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.45%)</title><rect x="66.1363%" y="437" width="0.4523%" height="15" fill="rgb(238,207,15)" fg:x="4240" fg:w="29"/><text x="66.3863%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.06%)</title><rect x="66.5887%" y="453" width="0.0624%" height="15" fill="rgb(213,199,42)" fg:x="4269" fg:w="4"/><text x="66.8387%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.25%)</title><rect x="66.6511%" y="453" width="0.2496%" height="15" fill="rgb(235,201,11)" fg:x="4273" fg:w="16"/><text x="66.9011%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.03%)</title><rect x="66.9006%" y="453" width="0.0312%" height="15" fill="rgb(207,46,11)" fg:x="4289" fg:w="2"/><text x="67.1506%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="66.9318%" y="453" width="0.0156%" height="15" fill="rgb(241,35,35)" fg:x="4291" fg:w="1"/><text x="67.1818%" y="463.50"></text></g><g><title>run`&lt;T as core::any::Any&gt;::type_id (4 samples, 0.06%)</title><rect x="66.9474%" y="453" width="0.0624%" height="15" fill="rgb(243,32,47)" fg:x="4292" fg:w="4"/><text x="67.1974%" y="463.50"></text></g><g><title>run`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="67.0098%" y="453" width="0.0156%" height="15" fill="rgb(247,202,23)" fg:x="4296" fg:w="1"/><text x="67.2598%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.09%)</title><rect x="67.0566%" y="421" width="0.0936%" height="15" fill="rgb(219,102,11)" fg:x="4299" fg:w="6"/><text x="67.3066%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.12%)</title><rect x="67.0410%" y="437" width="0.1248%" height="15" fill="rgb(243,110,44)" fg:x="4298" fg:w="8"/><text x="67.2910%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="67.1502%" y="421" width="0.0156%" height="15" fill="rgb(222,74,54)" fg:x="4305" fg:w="1"/><text x="67.4002%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="67.1658%" y="437" width="0.0156%" height="15" fill="rgb(216,99,12)" fg:x="4306" fg:w="1"/><text x="67.4158%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.12%)</title><rect x="67.1814%" y="437" width="0.1248%" height="15" fill="rgb(226,22,26)" fg:x="4307" fg:w="8"/><text x="67.4314%" y="447.50"></text></g><g><title>run`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="67.3062%" y="437" width="0.0156%" height="15" fill="rgb(217,163,10)" fg:x="4315" fg:w="1"/><text x="67.5562%" y="447.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="67.3218%" y="437" width="0.0312%" height="15" fill="rgb(213,25,53)" fg:x="4316" fg:w="2"/><text x="67.5718%" y="447.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="67.3530%" y="421" width="0.0312%" height="15" fill="rgb(252,105,26)" fg:x="4318" fg:w="2"/><text x="67.6030%" y="431.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.17%)</title><rect x="67.3842%" y="405" width="0.1716%" height="15" fill="rgb(220,39,43)" fg:x="4320" fg:w="11"/><text x="67.6342%" y="415.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::ternary::transform_send&lt;&lt;rusty_web_server::server::macro_server::MacroServer as rusty_web_server::WebServer&gt;::run::{{closure}},(i64,rusty_web_server::request::RawHttpRequest),i64,i64&gt;::{{closure}}&gt; (18 samples, 0.28%)</title><rect x="67.3530%" y="437" width="0.2808%" height="15" fill="rgb(229,68,48)" fg:x="4318" fg:w="18"/><text x="67.6030%" y="447.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rusty_junctions::types::Packet&gt;&gt; (16 samples, 0.25%)</title><rect x="67.3842%" y="421" width="0.2496%" height="15" fill="rgb(252,8,32)" fg:x="4320" fg:w="16"/><text x="67.6342%" y="431.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (5 samples, 0.08%)</title><rect x="67.5558%" y="405" width="0.0780%" height="15" fill="rgb(223,20,43)" fg:x="4331" fg:w="5"/><text x="67.8058%" y="415.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.12%)</title><rect x="67.6338%" y="405" width="0.1248%" height="15" fill="rgb(229,81,49)" fg:x="4336" fg:w="8"/><text x="67.8838%" y="415.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rusty_junctions::types::Packet&gt;&gt; (11 samples, 0.17%)</title><rect x="67.6338%" y="421" width="0.1716%" height="15" fill="rgb(236,28,36)" fg:x="4336" fg:w="11"/><text x="67.8838%" y="431.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (3 samples, 0.05%)</title><rect x="67.7585%" y="405" width="0.0468%" height="15" fill="rgb(249,185,26)" fg:x="4344" fg:w="3"/><text x="68.0085%" y="415.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::unary::transform_send&lt;&lt;rusty_web_server::server::macro_server::MacroServer as rusty_web_server::WebServer&gt;::run::{{closure}},rusty_web_server::action::Action&gt;::{{closure}}&gt; (12 samples, 0.19%)</title><rect x="67.6338%" y="437" width="0.1872%" height="15" fill="rgb(249,174,33)" fg:x="4336" fg:w="12"/><text x="67.8838%" y="447.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (1 samples, 0.02%)</title><rect x="67.8053%" y="421" width="0.0156%" height="15" fill="rgb(233,201,37)" fg:x="4347" fg:w="1"/><text x="68.0553%" y="431.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.08%)</title><rect x="67.8209%" y="421" width="0.0780%" height="15" fill="rgb(221,78,26)" fg:x="4348" fg:w="5"/><text x="68.0709%" y="431.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;&lt;rusty_junctions::patterns::n4ary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire::{{closure}}&gt; (61 samples, 0.95%)</title><rect x="67.0254%" y="453" width="0.9515%" height="15" fill="rgb(250,127,30)" fg:x="4297" fg:w="61"/><text x="67.2754%" y="463.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rusty_junctions::types::Packet&gt;&gt; (10 samples, 0.16%)</title><rect x="67.8209%" y="437" width="0.1560%" height="15" fill="rgb(230,49,44)" fg:x="4348" fg:w="10"/><text x="68.0709%" y="447.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (5 samples, 0.08%)</title><rect x="67.8989%" y="421" width="0.0780%" height="15" fill="rgb(229,67,23)" fg:x="4353" fg:w="5"/><text x="68.1489%" y="431.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::ternary::transform_send&lt;&lt;rusty_web_server::server::macro_server::MacroServer as rusty_web_server::WebServer&gt;::run::{{closure}},(i64,rusty_web_server::request::RawHttpRequest),i64,i64&gt;::{{closure}}&gt; (3 samples, 0.05%)</title><rect x="67.9769%" y="453" width="0.0468%" height="15" fill="rgb(249,83,47)" fg:x="4358" fg:w="3"/><text x="68.2269%" y="463.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::unary::transform_send&lt;&lt;rusty_web_server::server::macro_server::MacroServer as rusty_web_server::WebServer&gt;::run::{{closure}},rusty_web_server::action::Action&gt;::{{closure}}&gt; (4 samples, 0.06%)</title><rect x="68.0237%" y="453" width="0.0624%" height="15" fill="rgb(215,43,3)" fg:x="4361" fg:w="4"/><text x="68.2737%" y="463.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::unary::transform_send&lt;&lt;rusty_web_server::server::macro_server::MacroServer as rusty_web_server::WebServer&gt;::run::{{closure}},rusty_web_server::request::RawHttpRequest&gt;::{{closure}}&gt; (3 samples, 0.05%)</title><rect x="68.0861%" y="453" width="0.0468%" height="15" fill="rgb(238,154,13)" fg:x="4365" fg:w="3"/><text x="68.3361%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="68.1953%" y="437" width="0.0156%" height="15" fill="rgb(219,56,2)" fg:x="4372" fg:w="1"/><text x="68.4453%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="68.2109%" y="437" width="0.0312%" height="15" fill="rgb(233,0,4)" fg:x="4373" fg:w="2"/><text x="68.4609%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="68.2109%" y="421" width="0.0312%" height="15" fill="rgb(235,30,7)" fg:x="4373" fg:w="2"/><text x="68.4609%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="68.2421%" y="437" width="0.0156%" height="15" fill="rgb(250,79,13)" fg:x="4375" fg:w="1"/><text x="68.4921%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="68.2577%" y="437" width="0.0156%" height="15" fill="rgb(211,146,34)" fg:x="4376" fg:w="1"/><text x="68.5077%" y="447.50"></text></g><g><title>run`&lt;F as rusty_junctions::functions::ternary::FnBoxClone&gt;::clone_box (1 samples, 0.02%)</title><rect x="68.2733%" y="437" width="0.0156%" height="15" fill="rgb(228,22,38)" fg:x="4377" fg:w="1"/><text x="68.5233%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.05%)</title><rect x="68.3201%" y="421" width="0.0468%" height="15" fill="rgb(235,168,5)" fg:x="4380" fg:w="3"/><text x="68.5701%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="68.3201%" y="405" width="0.0468%" height="15" fill="rgb(221,155,16)" fg:x="4380" fg:w="3"/><text x="68.5701%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="68.3357%" y="389" width="0.0312%" height="15" fill="rgb(215,215,53)" fg:x="4381" fg:w="2"/><text x="68.5857%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="68.3513%" y="373" width="0.0156%" height="15" fill="rgb(223,4,10)" fg:x="4382" fg:w="1"/><text x="68.6013%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="68.4293%" y="405" width="0.0156%" height="15" fill="rgb(234,103,6)" fg:x="4387" fg:w="1"/><text x="68.6793%" y="415.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="68.4449%" y="405" width="0.0312%" height="15" fill="rgb(227,97,0)" fg:x="4388" fg:w="2"/><text x="68.6949%" y="415.50"></text></g><g><title>run`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.02%)</title><rect x="68.4761%" y="405" width="0.0156%" height="15" fill="rgb(234,150,53)" fg:x="4390" fg:w="1"/><text x="68.7261%" y="415.50"></text></g><g><title>run`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="68.4917%" y="405" width="0.0156%" height="15" fill="rgb(228,201,54)" fg:x="4391" fg:w="1"/><text x="68.7417%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.06%)</title><rect x="68.6164%" y="389" width="0.0624%" height="15" fill="rgb(222,22,37)" fg:x="4399" fg:w="4"/><text x="68.8664%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.06%)</title><rect x="68.6164%" y="373" width="0.0624%" height="15" fill="rgb(237,53,32)" fg:x="4399" fg:w="4"/><text x="68.8664%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="68.6788%" y="389" width="0.0156%" height="15" fill="rgb(233,25,53)" fg:x="4403" fg:w="1"/><text x="68.9288%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="68.6944%" y="389" width="0.0156%" height="15" fill="rgb(210,40,34)" fg:x="4404" fg:w="1"/><text x="68.9444%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.03%)</title><rect x="68.7100%" y="389" width="0.0312%" height="15" fill="rgb(241,220,44)" fg:x="4405" fg:w="2"/><text x="68.9600%" y="399.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.02%)</title><rect x="68.7412%" y="389" width="0.0156%" height="15" fill="rgb(235,28,35)" fg:x="4407" fg:w="1"/><text x="68.9912%" y="399.50"></text></g><g><title>run`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="68.7568%" y="389" width="0.0156%" height="15" fill="rgb(210,56,17)" fg:x="4408" fg:w="1"/><text x="69.0068%" y="399.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::ternary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (2 samples, 0.03%)</title><rect x="68.7724%" y="389" width="0.0312%" height="15" fill="rgb(224,130,29)" fg:x="4409" fg:w="2"/><text x="69.0224%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="68.7880%" y="373" width="0.0156%" height="15" fill="rgb(235,212,8)" fg:x="4410" fg:w="1"/><text x="69.0380%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="68.7880%" y="357" width="0.0156%" height="15" fill="rgb(223,33,50)" fg:x="4410" fg:w="1"/><text x="69.0380%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="68.7880%" y="341" width="0.0156%" height="15" fill="rgb(219,149,13)" fg:x="4410" fg:w="1"/><text x="69.0380%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="68.7880%" y="325" width="0.0156%" height="15" fill="rgb(250,156,29)" fg:x="4410" fg:w="1"/><text x="69.0380%" y="335.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::unary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (4 samples, 0.06%)</title><rect x="68.8036%" y="389" width="0.0624%" height="15" fill="rgb(216,193,19)" fg:x="4411" fg:w="4"/><text x="69.0536%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="68.8036%" y="373" width="0.0624%" height="15" fill="rgb(216,135,14)" fg:x="4411" fg:w="4"/><text x="69.0536%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="68.8036%" y="357" width="0.0624%" height="15" fill="rgb(241,47,5)" fg:x="4411" fg:w="4"/><text x="69.0536%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.06%)</title><rect x="68.8036%" y="341" width="0.0624%" height="15" fill="rgb(233,42,35)" fg:x="4411" fg:w="4"/><text x="69.0536%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.05%)</title><rect x="68.8192%" y="325" width="0.0468%" height="15" fill="rgb(231,13,6)" fg:x="4412" fg:w="3"/><text x="69.0692%" y="335.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (9 samples, 0.14%)</title><rect x="68.8660%" y="389" width="0.1404%" height="15" fill="rgb(207,181,40)" fg:x="4415" fg:w="9"/><text x="69.1160%" y="399.50"></text></g><g><title>run`&lt;rusty_junctions::types::ids::ChannelId as core::hash::Hash&gt;::hash (4 samples, 0.06%)</title><rect x="68.9440%" y="373" width="0.0624%" height="15" fill="rgb(254,173,49)" fg:x="4420" fg:w="4"/><text x="69.1940%" y="383.50"></text></g><g><title>run`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.05%)</title><rect x="69.0064%" y="389" width="0.0468%" height="15" fill="rgb(221,1,38)" fg:x="4424" fg:w="3"/><text x="69.2564%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.09%)</title><rect x="69.0532%" y="373" width="0.0936%" height="15" fill="rgb(206,124,46)" fg:x="4427" fg:w="6"/><text x="69.3032%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.09%)</title><rect x="69.0532%" y="357" width="0.0936%" height="15" fill="rgb(249,21,11)" fg:x="4427" fg:w="6"/><text x="69.3032%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.08%)</title><rect x="69.0688%" y="341" width="0.0780%" height="15" fill="rgb(222,201,40)" fg:x="4428" fg:w="5"/><text x="69.3188%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.05%)</title><rect x="69.1000%" y="325" width="0.0468%" height="15" fill="rgb(235,61,29)" fg:x="4430" fg:w="3"/><text x="69.3500%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="69.1468%" y="373" width="0.0156%" height="15" fill="rgb(219,207,3)" fg:x="4433" fg:w="1"/><text x="69.3968%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.05%)</title><rect x="69.1624%" y="373" width="0.0468%" height="15" fill="rgb(222,56,46)" fg:x="4434" fg:w="3"/><text x="69.4124%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="69.1780%" y="357" width="0.0312%" height="15" fill="rgb(239,76,54)" fg:x="4435" fg:w="2"/><text x="69.4280%" y="367.50"></text></g><g><title>run`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60 samples, 0.94%)</title><rect x="68.2889%" y="437" width="0.9359%" height="15" fill="rgb(231,124,27)" fg:x="4378" fg:w="60"/><text x="68.5389%" y="447.50"></text></g><g><title>run`rusty_junctions::controller::alive::_&lt;impl rusty_junctions::controller::Controller&gt;::is_alive (55 samples, 0.86%)</title><rect x="68.3669%" y="421" width="0.8579%" height="15" fill="rgb(249,195,6)" fg:x="4383" fg:w="55"/><text x="68.6169%" y="431.50"></text></g><g><title>run`rusty_junctions::join_pattern::JoinPattern::is_alive (46 samples, 0.72%)</title><rect x="68.5073%" y="405" width="0.7175%" height="15" fill="rgb(237,174,47)" fg:x="4392" fg:w="46"/><text x="68.7573%" y="415.50"></text></g><g><title>run`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.17%)</title><rect x="69.0532%" y="389" width="0.1716%" height="15" fill="rgb(206,201,31)" fg:x="4427" fg:w="11"/><text x="69.3032%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="69.2092%" y="373" width="0.0156%" height="15" fill="rgb(231,57,52)" fg:x="4437" fg:w="1"/><text x="69.4592%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="69.2248%" y="421" width="0.0156%" height="15" fill="rgb(248,177,22)" fg:x="4438" fg:w="1"/><text x="69.4748%" y="431.50"></text></g><g><title>run`&lt;F as rusty_junctions::functions::ternary::FnBoxClone&gt;::clone_box (1 samples, 0.02%)</title><rect x="69.2404%" y="421" width="0.0156%" height="15" fill="rgb(215,211,37)" fg:x="4439" fg:w="1"/><text x="69.4904%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="69.2716%" y="405" width="0.0624%" height="15" fill="rgb(241,128,51)" fg:x="4441" fg:w="4"/><text x="69.5216%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="69.2716%" y="389" width="0.0624%" height="15" fill="rgb(227,165,31)" fg:x="4441" fg:w="4"/><text x="69.5216%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.06%)</title><rect x="69.2716%" y="373" width="0.0624%" height="15" fill="rgb(228,167,24)" fg:x="4441" fg:w="4"/><text x="69.5216%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.05%)</title><rect x="69.2872%" y="357" width="0.0468%" height="15" fill="rgb(228,143,12)" fg:x="4442" fg:w="3"/><text x="69.5372%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_attr_setstacksize (1 samples, 0.02%)</title><rect x="69.3340%" y="405" width="0.0156%" height="15" fill="rgb(249,149,8)" fg:x="4445" fg:w="1"/><text x="69.5840%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (75 samples, 1.17%)</title><rect x="69.3496%" y="389" width="1.1699%" height="15" fill="rgb(243,35,44)" fg:x="4446" fg:w="75"/><text x="69.5996%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.02%)</title><rect x="70.5194%" y="389" width="0.0156%" height="15" fill="rgb(246,89,9)" fg:x="4521" fg:w="1"/><text x="70.7694%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (37 samples, 0.58%)</title><rect x="71.3773%" y="373" width="0.5771%" height="15" fill="rgb(233,213,13)" fg:x="4576" fg:w="37"/><text x="71.6273%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (27 samples, 0.42%)</title><rect x="71.9545%" y="373" width="0.4212%" height="15" fill="rgb(233,141,41)" fg:x="4613" fg:w="27"/><text x="72.2045%" y="383.50"></text></g><g><title>run`std::sys::unix::thread::Thread::new (195 samples, 3.04%)</title><rect x="69.3496%" y="405" width="3.0416%" height="15" fill="rgb(239,167,4)" fg:x="4446" fg:w="195"/><text x="69.5996%" y="415.50">run..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (119 samples, 1.86%)</title><rect x="70.5350%" y="389" width="1.8562%" height="15" fill="rgb(209,217,16)" fg:x="4522" fg:w="119"/><text x="70.7850%" y="399.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.02%)</title><rect x="72.3756%" y="373" width="0.0156%" height="15" fill="rgb(219,88,35)" fg:x="4640" fg:w="1"/><text x="72.6256%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="72.4068%" y="389" width="0.0624%" height="15" fill="rgb(220,193,23)" fg:x="4642" fg:w="4"/><text x="72.6568%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="72.4224%" y="373" width="0.0468%" height="15" fill="rgb(230,90,52)" fg:x="4643" fg:w="3"/><text x="72.6724%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.05%)</title><rect x="72.4224%" y="357" width="0.0468%" height="15" fill="rgb(252,106,19)" fg:x="4643" fg:w="3"/><text x="72.6724%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.05%)</title><rect x="72.4224%" y="341" width="0.0468%" height="15" fill="rgb(206,74,20)" fg:x="4643" fg:w="3"/><text x="72.6724%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (3 samples, 0.05%)</title><rect x="72.4692%" y="389" width="0.0468%" height="15" fill="rgb(230,138,44)" fg:x="4646" fg:w="3"/><text x="72.7192%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="72.5160%" y="389" width="0.0156%" height="15" fill="rgb(235,182,43)" fg:x="4649" fg:w="1"/><text x="72.7660%" y="399.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::ternary::SendJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire (213 samples, 3.32%)</title><rect x="69.2248%" y="437" width="3.3224%" height="15" fill="rgb(242,16,51)" fg:x="4438" fg:w="213"/><text x="69.4748%" y="447.50">run..</text></g><g><title>run`std::thread::spawn (211 samples, 3.29%)</title><rect x="69.2560%" y="421" width="3.2912%" height="15" fill="rgb(248,9,4)" fg:x="4440" fg:w="211"/><text x="69.5060%" y="431.50">run..</text></g><g><title>run`std::thread::Thread::new (10 samples, 0.16%)</title><rect x="72.3912%" y="405" width="0.1560%" height="15" fill="rgb(210,31,22)" fg:x="4641" fg:w="10"/><text x="72.6412%" y="415.50"></text></g><g><title>run`std::sys_common::mutex::MovableMutex::new (1 samples, 0.02%)</title><rect x="72.5316%" y="389" width="0.0156%" height="15" fill="rgb(239,54,39)" fg:x="4650" fg:w="1"/><text x="72.7816%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="72.5316%" y="373" width="0.0156%" height="15" fill="rgb(230,99,41)" fg:x="4650" fg:w="1"/><text x="72.7816%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="72.5316%" y="357" width="0.0156%" height="15" fill="rgb(253,106,12)" fg:x="4650" fg:w="1"/><text x="72.7816%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="72.5316%" y="341" width="0.0156%" height="15" fill="rgb(213,46,41)" fg:x="4650" fg:w="1"/><text x="72.7816%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="72.5316%" y="325" width="0.0156%" height="15" fill="rgb(215,133,35)" fg:x="4650" fg:w="1"/><text x="72.7816%" y="335.50"></text></g><g><title>run`&lt;F as rusty_junctions::functions::unary::FnBoxClone&gt;::clone_box (2 samples, 0.03%)</title><rect x="72.5472%" y="421" width="0.0312%" height="15" fill="rgb(213,28,5)" fg:x="4651" fg:w="2"/><text x="72.7972%" y="431.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="72.5472%" y="405" width="0.0312%" height="15" fill="rgb(215,77,49)" fg:x="4651" fg:w="2"/><text x="72.7972%" y="415.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="72.5784%" y="421" width="0.0156%" height="15" fill="rgb(248,100,22)" fg:x="4653" fg:w="1"/><text x="72.8284%" y="431.50"></text></g><g><title>run`std::sys_common::thread::min_stack (1 samples, 0.02%)</title><rect x="72.5940%" y="421" width="0.0156%" height="15" fill="rgb(208,67,9)" fg:x="4654" fg:w="1"/><text x="72.8440%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="72.6720%" y="405" width="0.0312%" height="15" fill="rgb(219,133,21)" fg:x="4659" fg:w="2"/><text x="72.9220%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="72.6720%" y="389" width="0.0312%" height="15" fill="rgb(246,46,29)" fg:x="4659" fg:w="2"/><text x="72.9220%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="72.6720%" y="373" width="0.0312%" height="15" fill="rgb(246,185,52)" fg:x="4659" fg:w="2"/><text x="72.9220%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_attr_setstacksize (2 samples, 0.03%)</title><rect x="72.7032%" y="405" width="0.0312%" height="15" fill="rgb(252,136,11)" fg:x="4661" fg:w="2"/><text x="72.9532%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (90 samples, 1.40%)</title><rect x="72.7344%" y="389" width="1.4038%" height="15" fill="rgb(219,138,53)" fg:x="4663" fg:w="90"/><text x="72.9844%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.02%)</title><rect x="74.1382%" y="389" width="0.0156%" height="15" fill="rgb(211,51,23)" fg:x="4753" fg:w="1"/><text x="74.3882%" y="399.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock_no_tsd (1 samples, 0.02%)</title><rect x="74.1538%" y="389" width="0.0156%" height="15" fill="rgb(247,221,28)" fg:x="4754" fg:w="1"/><text x="74.4038%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (36 samples, 0.56%)</title><rect x="74.9961%" y="373" width="0.5615%" height="15" fill="rgb(251,222,45)" fg:x="4808" fg:w="36"/><text x="75.2461%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (29 samples, 0.45%)</title><rect x="75.5576%" y="373" width="0.4523%" height="15" fill="rgb(217,162,53)" fg:x="4844" fg:w="29"/><text x="75.8076%" y="383.50"></text></g><g><title>run`std::sys::unix::thread::Thread::new (211 samples, 3.29%)</title><rect x="72.7344%" y="405" width="3.2912%" height="15" fill="rgb(229,93,14)" fg:x="4663" fg:w="211"/><text x="72.9844%" y="415.50">run..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (119 samples, 1.86%)</title><rect x="74.1694%" y="389" width="1.8562%" height="15" fill="rgb(209,67,49)" fg:x="4755" fg:w="119"/><text x="74.4194%" y="399.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_vm_protect (1 samples, 0.02%)</title><rect x="76.0100%" y="373" width="0.0156%" height="15" fill="rgb(213,87,29)" fg:x="4873" fg:w="1"/><text x="76.2600%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_init (1 samples, 0.02%)</title><rect x="76.0256%" y="389" width="0.0156%" height="15" fill="rgb(205,151,52)" fg:x="4874" fg:w="1"/><text x="76.2756%" y="399.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::unary::SendJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire (225 samples, 3.51%)</title><rect x="72.5472%" y="437" width="3.5096%" height="15" fill="rgb(253,215,39)" fg:x="4651" fg:w="225"/><text x="72.7972%" y="447.50">run..</text></g><g><title>run`std::thread::spawn (221 samples, 3.45%)</title><rect x="72.6096%" y="421" width="3.4472%" height="15" fill="rgb(221,220,41)" fg:x="4655" fg:w="221"/><text x="72.8596%" y="431.50">run..</text></g><g><title>run`std::thread::Thread::new (2 samples, 0.03%)</title><rect x="76.0256%" y="405" width="0.0312%" height="15" fill="rgb(218,133,21)" fg:x="4874" fg:w="2"/><text x="76.2756%" y="415.50"></text></g><g><title>run`std::sys_common::mutex::MovableMutex::new (1 samples, 0.02%)</title><rect x="76.0412%" y="389" width="0.0156%" height="15" fill="rgb(221,193,43)" fg:x="4875" fg:w="1"/><text x="76.2912%" y="399.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.06%)</title><rect x="76.0568%" y="437" width="0.0624%" height="15" fill="rgb(240,128,52)" fg:x="4876" fg:w="4"/><text x="76.3068%" y="447.50"></text></g><g><title>run`alloc::raw_vec::finish_grow (4 samples, 0.06%)</title><rect x="76.0568%" y="421" width="0.0624%" height="15" fill="rgb(253,114,12)" fg:x="4876" fg:w="4"/><text x="76.3068%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="76.0568%" y="405" width="0.0624%" height="15" fill="rgb(215,223,47)" fg:x="4876" fg:w="4"/><text x="76.3068%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="76.0568%" y="389" width="0.0624%" height="15" fill="rgb(248,225,23)" fg:x="4876" fg:w="4"/><text x="76.3068%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.06%)</title><rect x="76.0568%" y="373" width="0.0624%" height="15" fill="rgb(250,108,0)" fg:x="4876" fg:w="4"/><text x="76.3068%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.06%)</title><rect x="76.0568%" y="357" width="0.0624%" height="15" fill="rgb(228,208,7)" fg:x="4876" fg:w="4"/><text x="76.3068%" y="367.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (1 samples, 0.02%)</title><rect x="76.3375%" y="405" width="0.0156%" height="15" fill="rgb(244,45,10)" fg:x="4894" fg:w="1"/><text x="76.5875%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`pthread_detach (56 samples, 0.87%)</title><rect x="76.3531%" y="405" width="0.8735%" height="15" fill="rgb(207,125,25)" fg:x="4895" fg:w="56"/><text x="76.6031%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (54 samples, 0.84%)</title><rect x="76.3843%" y="389" width="0.8423%" height="15" fill="rgb(210,195,18)" fg:x="4897" fg:w="54"/><text x="76.6343%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (53 samples, 0.83%)</title><rect x="76.3999%" y="373" width="0.8267%" height="15" fill="rgb(249,80,12)" fg:x="4898" fg:w="53"/><text x="76.6499%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (53 samples, 0.83%)</title><rect x="76.3999%" y="357" width="0.8267%" height="15" fill="rgb(221,65,9)" fg:x="4898" fg:w="53"/><text x="76.6499%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="77.2266%" y="389" width="0.0156%" height="15" fill="rgb(235,49,36)" fg:x="4951" fg:w="1"/><text x="77.4766%" y="399.50"></text></g><g><title>run`alloc::vec::Vec&lt;T,A&gt;::retain (73 samples, 1.14%)</title><rect x="76.1192%" y="437" width="1.1387%" height="15" fill="rgb(225,32,20)" fg:x="4880" fg:w="73"/><text x="76.3692%" y="447.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::thread::JoinHandle&lt;()&gt;&gt; (59 samples, 0.92%)</title><rect x="76.3375%" y="421" width="0.9203%" height="15" fill="rgb(215,141,46)" fg:x="4894" fg:w="59"/><text x="76.5875%" y="431.50"></text></g><g><title>run`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.03%)</title><rect x="77.2266%" y="405" width="0.0312%" height="15" fill="rgb(250,160,47)" fg:x="4951" fg:w="2"/><text x="77.4766%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="77.2422%" y="389" width="0.0156%" height="15" fill="rgb(216,222,40)" fg:x="4952" fg:w="1"/><text x="77.4922%" y="399.50"></text></g><g><title>run`bag::Bag&lt;K,V&gt;::add (15 samples, 0.23%)</title><rect x="77.2578%" y="437" width="0.2340%" height="15" fill="rgb(234,217,39)" fg:x="4953" fg:w="15"/><text x="77.5078%" y="447.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (12 samples, 0.19%)</title><rect x="77.3046%" y="421" width="0.1872%" height="15" fill="rgb(207,178,40)" fg:x="4956" fg:w="12"/><text x="77.5546%" y="431.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="77.4918%" y="437" width="0.0312%" height="15" fill="rgb(221,136,13)" fg:x="4968" fg:w="2"/><text x="77.7418%" y="447.50"></text></g><g><title>run`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.02%)</title><rect x="77.5230%" y="437" width="0.0156%" height="15" fill="rgb(249,199,10)" fg:x="4970" fg:w="1"/><text x="77.7730%" y="447.50"></text></g><g><title>run`counter::Counter::increment (2 samples, 0.03%)</title><rect x="77.5386%" y="437" width="0.0312%" height="15" fill="rgb(249,222,13)" fg:x="4971" fg:w="2"/><text x="77.7886%" y="447.50"></text></g><g><title>run`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.06%)</title><rect x="77.5698%" y="437" width="0.0624%" height="15" fill="rgb(244,185,38)" fg:x="4973" fg:w="4"/><text x="77.8198%" y="447.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (2 samples, 0.03%)</title><rect x="77.6010%" y="421" width="0.0312%" height="15" fill="rgb(236,202,9)" fg:x="4975" fg:w="2"/><text x="77.8510%" y="431.50"></text></g><g><title>run`std::sync::mpsc::blocking::tokens (1 samples, 0.02%)</title><rect x="77.6322%" y="421" width="0.0156%" height="15" fill="rgb(250,229,37)" fg:x="4977" fg:w="1"/><text x="77.8822%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="77.6478%" y="405" width="0.0156%" height="15" fill="rgb(206,174,23)" fg:x="4978" fg:w="1"/><text x="77.8978%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="77.6634%" y="405" width="0.0156%" height="15" fill="rgb(211,33,43)" fg:x="4979" fg:w="1"/><text x="77.9134%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="77.7570%" y="389" width="0.0156%" height="15" fill="rgb(245,58,50)" fg:x="4985" fg:w="1"/><text x="78.0070%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="77.7570%" y="373" width="0.0156%" height="15" fill="rgb(244,68,36)" fg:x="4985" fg:w="1"/><text x="78.0070%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="77.7726%" y="389" width="0.0156%" height="15" fill="rgb(232,229,15)" fg:x="4986" fg:w="1"/><text x="78.0226%" y="399.50"></text></g><g><title>run`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="77.7882%" y="389" width="0.0156%" height="15" fill="rgb(254,30,23)" fg:x="4987" fg:w="1"/><text x="78.0382%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (46 samples, 0.72%)</title><rect x="77.8038%" y="373" width="0.7175%" height="15" fill="rgb(235,160,14)" fg:x="4988" fg:w="46"/><text x="78.0538%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.06%)</title><rect x="78.5213%" y="373" width="0.0624%" height="15" fill="rgb(212,155,44)" fg:x="5034" fg:w="4"/><text x="78.7713%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="78.5681%" y="357" width="0.0156%" height="15" fill="rgb(226,2,50)" fg:x="5037" fg:w="1"/><text x="78.8181%" y="367.50"></text></g><g><title>run`std::sync::mpsc::blocking::WaitToken::wait (59 samples, 0.92%)</title><rect x="77.6790%" y="405" width="0.9203%" height="15" fill="rgb(234,177,6)" fg:x="4980" fg:w="59"/><text x="77.9290%" y="415.50"></text></g><g><title>run`std::thread::park (51 samples, 0.80%)</title><rect x="77.8038%" y="389" width="0.7955%" height="15" fill="rgb(217,24,9)" fg:x="4988" fg:w="51"/><text x="78.0538%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.02%)</title><rect x="78.5837%" y="373" width="0.0156%" height="15" fill="rgb(220,13,46)" fg:x="5038" fg:w="1"/><text x="78.8337%" y="383.50"></text></g><g><title>run`std::sync::mpsc::blocking::tokens (2 samples, 0.03%)</title><rect x="78.5993%" y="405" width="0.0312%" height="15" fill="rgb(239,221,27)" fg:x="5039" fg:w="2"/><text x="78.8493%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="78.6149%" y="389" width="0.0156%" height="15" fill="rgb(222,198,25)" fg:x="5040" fg:w="1"/><text x="78.8649%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="78.6149%" y="373" width="0.0156%" height="15" fill="rgb(211,99,13)" fg:x="5040" fg:w="1"/><text x="78.8649%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="78.6149%" y="357" width="0.0156%" height="15" fill="rgb(232,111,31)" fg:x="5040" fg:w="1"/><text x="78.8649%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="78.6149%" y="341" width="0.0156%" height="15" fill="rgb(245,82,37)" fg:x="5040" fg:w="1"/><text x="78.8649%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="78.6617%" y="373" width="0.0156%" height="15" fill="rgb(227,149,46)" fg:x="5043" fg:w="1"/><text x="78.9117%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="78.6617%" y="357" width="0.0156%" height="15" fill="rgb(218,36,50)" fg:x="5043" fg:w="1"/><text x="78.9117%" y="367.50"></text></g><g><title>run`rusty_junctions::controller::handlers::_&lt;impl rusty_junctions::controller::Controller&gt;::handle_packets (677 samples, 10.56%)</title><rect x="68.1329%" y="453" width="10.5600%" height="15" fill="rgb(226,80,48)" fg:x="4368" fg:w="677"/><text x="68.3829%" y="463.50">run`rusty_junct..</text></g><g><title>run`std::sync::mpsc::Receiver&lt;T&gt;::recv (68 samples, 1.06%)</title><rect x="77.6322%" y="437" width="1.0607%" height="15" fill="rgb(238,224,15)" fg:x="4977" fg:w="68"/><text x="77.8822%" y="447.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (67 samples, 1.05%)</title><rect x="77.6478%" y="421" width="1.0451%" height="15" fill="rgb(241,136,10)" fg:x="4978" fg:w="67"/><text x="77.8978%" y="431.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (4 samples, 0.06%)</title><rect x="78.6305%" y="405" width="0.0624%" height="15" fill="rgb(208,32,45)" fg:x="5041" fg:w="4"/><text x="78.8805%" y="415.50"></text></g><g><title>run`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (4 samples, 0.06%)</title><rect x="78.6305%" y="389" width="0.0624%" height="15" fill="rgb(207,135,9)" fg:x="5041" fg:w="4"/><text x="78.8805%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="78.6773%" y="373" width="0.0156%" height="15" fill="rgb(206,86,44)" fg:x="5044" fg:w="1"/><text x="78.9273%" y="383.50"></text></g><g><title>libsystem_c.dylib`nanosleep (1 samples, 0.02%)</title><rect x="78.7865%" y="437" width="0.0156%" height="15" fill="rgb(245,177,15)" fg:x="5051" fg:w="1"/><text x="79.0365%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (77 samples, 1.20%)</title><rect x="78.8021%" y="437" width="1.2011%" height="15" fill="rgb(206,64,50)" fg:x="5052" fg:w="77"/><text x="79.0521%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="80.0031%" y="437" width="0.0156%" height="15" fill="rgb(234,36,40)" fg:x="5129" fg:w="1"/><text x="80.2531%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="80.0031%" y="421" width="0.0156%" height="15" fill="rgb(213,64,8)" fg:x="5129" fg:w="1"/><text x="80.2531%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="80.0031%" y="405" width="0.0156%" height="15" fill="rgb(210,75,36)" fg:x="5129" fg:w="1"/><text x="80.2531%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="80.0031%" y="389" width="0.0156%" height="15" fill="rgb(229,88,21)" fg:x="5129" fg:w="1"/><text x="80.2531%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="80.0187%" y="437" width="0.0156%" height="15" fill="rgb(252,204,47)" fg:x="5130" fg:w="1"/><text x="80.2687%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.20%)</title><rect x="80.0343%" y="437" width="0.2028%" height="15" fill="rgb(208,77,27)" fg:x="5131" fg:w="13"/><text x="80.2843%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.16%)</title><rect x="80.0811%" y="421" width="0.1560%" height="15" fill="rgb(221,76,26)" fg:x="5134" fg:w="10"/><text x="80.3311%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.16%)</title><rect x="80.2371%" y="437" width="0.1560%" height="15" fill="rgb(225,139,18)" fg:x="5144" fg:w="10"/><text x="80.4871%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="80.3931%" y="437" width="0.0468%" height="15" fill="rgb(230,137,11)" fg:x="5154" fg:w="3"/><text x="80.6431%" y="447.50"></text></g><g><title>run`&lt;std::fs::File as std::io::Write&gt;::flush (1 samples, 0.02%)</title><rect x="80.4399%" y="437" width="0.0156%" height="15" fill="rgb(212,28,1)" fg:x="5157" fg:w="1"/><text x="80.6899%" y="447.50"></text></g><g><title>run`DYLD-STUB$$nanosleep (1 samples, 0.02%)</title><rect x="80.4555%" y="437" width="0.0156%" height="15" fill="rgb(248,164,17)" fg:x="5158" fg:w="1"/><text x="80.7055%" y="447.50"></text></g><g><title>run`__rdl_dealloc (1 samples, 0.02%)</title><rect x="80.4711%" y="437" width="0.0156%" height="15" fill="rgb(222,171,42)" fg:x="5159" fg:w="1"/><text x="80.7211%" y="447.50"></text></g><g><title>run`__rust_alloc (1 samples, 0.02%)</title><rect x="80.4867%" y="437" width="0.0156%" height="15" fill="rgb(243,84,45)" fg:x="5160" fg:w="1"/><text x="80.7367%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="80.5023%" y="421" width="0.0624%" height="15" fill="rgb(252,49,23)" fg:x="5161" fg:w="4"/><text x="80.7523%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="80.5023%" y="405" width="0.0624%" height="15" fill="rgb(215,19,7)" fg:x="5161" fg:w="4"/><text x="80.7523%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.05%)</title><rect x="80.5179%" y="389" width="0.0468%" height="15" fill="rgb(238,81,41)" fg:x="5162" fg:w="3"/><text x="80.7679%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="80.5335%" y="373" width="0.0312%" height="15" fill="rgb(210,199,37)" fg:x="5163" fg:w="2"/><text x="80.7835%" y="383.50"></text></g><g><title>run`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.03%)</title><rect x="80.5647%" y="421" width="0.0312%" height="15" fill="rgb(244,192,49)" fg:x="5165" fg:w="2"/><text x="80.8147%" y="431.50"></text></g><g><title>run`alloc::fmt::format (7 samples, 0.11%)</title><rect x="80.5023%" y="437" width="0.1092%" height="15" fill="rgb(226,211,11)" fg:x="5161" fg:w="7"/><text x="80.7523%" y="447.50"></text></g><g><title>run`core::fmt::write (1 samples, 0.02%)</title><rect x="80.5959%" y="421" width="0.0156%" height="15" fill="rgb(236,162,54)" fg:x="5167" fg:w="1"/><text x="80.8459%" y="431.50"></text></g><g><title>run`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.02%)</title><rect x="80.5959%" y="405" width="0.0156%" height="15" fill="rgb(220,229,9)" fg:x="5167" fg:w="1"/><text x="80.8459%" y="415.50"></text></g><g><title>libsystem_c.dylib`send (1 samples, 0.02%)</title><rect x="80.6270%" y="421" width="0.0156%" height="15" fill="rgb(250,87,22)" fg:x="5169" fg:w="1"/><text x="80.8770%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (110 samples, 1.72%)</title><rect x="80.6426%" y="421" width="1.7158%" height="15" fill="rgb(239,43,17)" fg:x="5170" fg:w="110"/><text x="80.8926%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="82.3584%" y="421" width="0.0312%" height="15" fill="rgb(231,177,25)" fg:x="5280" fg:w="2"/><text x="82.6084%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="82.3584%" y="405" width="0.0312%" height="15" fill="rgb(219,179,1)" fg:x="5280" fg:w="2"/><text x="82.6084%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="82.3896%" y="421" width="0.0156%" height="15" fill="rgb(238,219,53)" fg:x="5282" fg:w="1"/><text x="82.6396%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.05%)</title><rect x="82.4052%" y="421" width="0.0468%" height="15" fill="rgb(232,167,36)" fg:x="5283" fg:w="3"/><text x="82.6552%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.05%)</title><rect x="82.4520%" y="405" width="0.0468%" height="15" fill="rgb(244,19,51)" fg:x="5286" fg:w="3"/><text x="82.7020%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="82.4520%" y="389" width="0.0468%" height="15" fill="rgb(224,6,22)" fg:x="5286" fg:w="3"/><text x="82.7020%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.05%)</title><rect x="82.4520%" y="373" width="0.0468%" height="15" fill="rgb(224,145,5)" fg:x="5286" fg:w="3"/><text x="82.7020%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="82.4676%" y="357" width="0.0312%" height="15" fill="rgb(234,130,49)" fg:x="5287" fg:w="2"/><text x="82.7176%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="82.5144%" y="373" width="0.0156%" height="15" fill="rgb(254,6,2)" fg:x="5290" fg:w="1"/><text x="82.7644%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="82.5300%" y="341" width="0.0156%" height="15" fill="rgb(208,96,46)" fg:x="5291" fg:w="1"/><text x="82.7800%" y="351.50"></text></g><g><title>run`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.06%)</title><rect x="82.4988%" y="389" width="0.0624%" height="15" fill="rgb(239,3,39)" fg:x="5289" fg:w="4"/><text x="82.7488%" y="399.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.03%)</title><rect x="82.5300%" y="373" width="0.0312%" height="15" fill="rgb(233,210,1)" fg:x="5291" fg:w="2"/><text x="82.7800%" y="383.50"></text></g><g><title>run`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="82.5300%" y="357" width="0.0312%" height="15" fill="rgb(244,137,37)" fg:x="5291" fg:w="2"/><text x="82.7800%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="82.5456%" y="341" width="0.0156%" height="15" fill="rgb(240,136,2)" fg:x="5292" fg:w="1"/><text x="82.7956%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="82.5456%" y="325" width="0.0156%" height="15" fill="rgb(239,18,37)" fg:x="5292" fg:w="1"/><text x="82.7956%" y="335.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="82.5612%" y="389" width="0.0156%" height="15" fill="rgb(218,185,22)" fg:x="5293" fg:w="1"/><text x="82.8112%" y="399.50"></text></g><g><title>run`rusty_web_server::response::HttpResponse::send (128 samples, 2.00%)</title><rect x="80.6114%" y="437" width="1.9966%" height="15" fill="rgb(225,218,4)" fg:x="5168" fg:w="128"/><text x="80.8614%" y="447.50">r..</text></g><g><title>run`alloc::fmt::format (10 samples, 0.16%)</title><rect x="82.4520%" y="421" width="0.1560%" height="15" fill="rgb(230,182,32)" fg:x="5286" fg:w="10"/><text x="82.7020%" y="431.50"></text></g><g><title>run`core::fmt::write (7 samples, 0.11%)</title><rect x="82.4988%" y="405" width="0.1092%" height="15" fill="rgb(242,56,43)" fg:x="5289" fg:w="7"/><text x="82.7488%" y="415.50"></text></g><g><title>run`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.03%)</title><rect x="82.5768%" y="389" width="0.0312%" height="15" fill="rgb(233,99,24)" fg:x="5294" fg:w="2"/><text x="82.8268%" y="399.50"></text></g><g><title>run`core::fmt::Formatter::pad_integral (1 samples, 0.02%)</title><rect x="82.5924%" y="373" width="0.0156%" height="15" fill="rgb(234,209,42)" fg:x="5295" fg:w="1"/><text x="82.8424%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (18 samples, 0.28%)</title><rect x="82.6860%" y="389" width="0.2808%" height="15" fill="rgb(227,7,12)" fg:x="5301" fg:w="18"/><text x="82.9360%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.02%)</title><rect x="82.9668%" y="389" width="0.0156%" height="15" fill="rgb(245,203,43)" fg:x="5319" fg:w="1"/><text x="83.2168%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (1 samples, 0.02%)</title><rect x="82.9668%" y="373" width="0.0156%" height="15" fill="rgb(238,205,33)" fg:x="5319" fg:w="1"/><text x="83.2168%" y="383.50"></text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (25 samples, 0.39%)</title><rect x="82.6080%" y="437" width="0.3900%" height="15" fill="rgb(231,56,7)" fg:x="5296" fg:w="25"/><text x="82.8580%" y="447.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::send (25 samples, 0.39%)</title><rect x="82.6080%" y="421" width="0.3900%" height="15" fill="rgb(244,186,29)" fg:x="5296" fg:w="25"/><text x="82.8580%" y="431.50"></text></g><g><title>run`std::sync::mpsc::blocking::SignalToken::signal (20 samples, 0.31%)</title><rect x="82.6860%" y="405" width="0.3120%" height="15" fill="rgb(234,111,31)" fg:x="5301" fg:w="20"/><text x="82.9360%" y="415.50"></text></g><g><title>run`std::sys_common::thread_parker::generic::Parker::unpark (1 samples, 0.02%)</title><rect x="82.9824%" y="389" width="0.0156%" height="15" fill="rgb(241,149,10)" fg:x="5320" fg:w="1"/><text x="83.2324%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="82.9824%" y="373" width="0.0156%" height="15" fill="rgb(249,206,44)" fg:x="5320" fg:w="1"/><text x="83.2324%" y="383.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__error (1 samples, 0.02%)</title><rect x="83.0448%" y="421" width="0.0156%" height="15" fill="rgb(251,153,30)" fg:x="5324" fg:w="1"/><text x="83.2948%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`_pthread_exit_if_canceled (1 samples, 0.02%)</title><rect x="83.0916%" y="405" width="0.0156%" height="15" fill="rgb(239,152,38)" fg:x="5327" fg:w="1"/><text x="83.3416%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (2 samples, 0.03%)</title><rect x="83.1072%" y="405" width="0.0312%" height="15" fill="rgb(249,139,47)" fg:x="5328" fg:w="2"/><text x="83.3572%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (54 samples, 0.84%)</title><rect x="83.1384%" y="389" width="0.8423%" height="15" fill="rgb(244,64,35)" fg:x="5330" fg:w="54"/><text x="83.3884%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (76 samples, 1.19%)</title><rect x="83.1384%" y="405" width="1.1855%" height="15" fill="rgb(216,46,15)" fg:x="5330" fg:w="76"/><text x="83.3884%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`mach_reply_port (22 samples, 0.34%)</title><rect x="83.9807%" y="389" width="0.3432%" height="15" fill="rgb(250,74,19)" fg:x="5384" fg:w="22"/><text x="84.2307%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (4 samples, 0.06%)</title><rect x="84.3238%" y="405" width="0.0624%" height="15" fill="rgb(249,42,33)" fg:x="5406" fg:w="4"/><text x="84.5738%" y="415.50"></text></g><g><title>libsystem_c.dylib`nanosleep (86 samples, 1.34%)</title><rect x="83.0604%" y="421" width="1.3414%" height="15" fill="rgb(242,149,17)" fg:x="5325" fg:w="86"/><text x="83.3104%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.02%)</title><rect x="84.3862%" y="405" width="0.0156%" height="15" fill="rgb(244,29,21)" fg:x="5410" fg:w="1"/><text x="84.6362%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__error (3 samples, 0.05%)</title><rect x="84.4018%" y="421" width="0.0468%" height="15" fill="rgb(220,130,37)" fg:x="5411" fg:w="3"/><text x="84.6518%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (230 samples, 3.59%)</title><rect x="84.4486%" y="421" width="3.5876%" height="15" fill="rgb(211,67,2)" fg:x="5414" fg:w="230"/><text x="84.6986%" y="431.50">libs..</text></g><g><title>libsystem_kernel.dylib`cerror (2 samples, 0.03%)</title><rect x="88.0362%" y="421" width="0.0312%" height="15" fill="rgb(235,68,52)" fg:x="5644" fg:w="2"/><text x="88.2862%" y="431.50"></text></g><g><title>run`rusty_junctions::function_transforms::ternary::transform_send::_{{closure}} (602 samples, 9.39%)</title><rect x="78.6929%" y="453" width="9.3901%" height="15" fill="rgb(246,142,3)" fg:x="5045" fg:w="602"/><text x="78.9429%" y="463.50">run`rusty_jun..</text></g><g><title>run`std::thread::sleep (326 samples, 5.09%)</title><rect x="82.9980%" y="437" width="5.0850%" height="15" fill="rgb(241,25,7)" fg:x="5321" fg:w="326"/><text x="83.2480%" y="447.50">run`st..</text></g><g><title>libsystem_kernel.dylib`clock_get_time (1 samples, 0.02%)</title><rect x="88.0674%" y="421" width="0.0156%" height="15" fill="rgb(242,119,39)" fg:x="5646" fg:w="1"/><text x="88.3174%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="88.2078%" y="437" width="0.0156%" height="15" fill="rgb(241,98,45)" fg:x="5655" fg:w="1"/><text x="88.4578%" y="447.50"></text></g><g><title>run`httparse::Request::parse (1 samples, 0.02%)</title><rect x="88.2234%" y="437" width="0.0156%" height="15" fill="rgb(254,28,30)" fg:x="5656" fg:w="1"/><text x="88.4734%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="88.2390%" y="405" width="0.0312%" height="15" fill="rgb(241,142,54)" fg:x="5657" fg:w="2"/><text x="88.4890%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="88.2546%" y="389" width="0.0156%" height="15" fill="rgb(222,85,15)" fg:x="5658" fg:w="1"/><text x="88.5046%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="88.2702%" y="405" width="0.0312%" height="15" fill="rgb(210,85,47)" fg:x="5659" fg:w="2"/><text x="88.5202%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.03%)</title><rect x="88.2702%" y="389" width="0.0312%" height="15" fill="rgb(224,206,25)" fg:x="5659" fg:w="2"/><text x="88.5202%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.03%)</title><rect x="88.3014%" y="405" width="0.0312%" height="15" fill="rgb(243,201,19)" fg:x="5661" fg:w="2"/><text x="88.5514%" y="415.50"></text></g><g><title>run`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="88.3326%" y="405" width="0.0156%" height="15" fill="rgb(236,59,4)" fg:x="5663" fg:w="1"/><text x="88.5826%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="88.3326%" y="389" width="0.0156%" height="15" fill="rgb(254,179,45)" fg:x="5663" fg:w="1"/><text x="88.5826%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="88.3482%" y="389" width="0.0156%" height="15" fill="rgb(226,14,10)" fg:x="5664" fg:w="1"/><text x="88.5982%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="88.3482%" y="373" width="0.0156%" height="15" fill="rgb(244,27,41)" fg:x="5664" fg:w="1"/><text x="88.5982%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="88.3482%" y="357" width="0.0156%" height="15" fill="rgb(235,35,32)" fg:x="5664" fg:w="1"/><text x="88.5982%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="88.3793%" y="373" width="0.0312%" height="15" fill="rgb(218,68,31)" fg:x="5666" fg:w="2"/><text x="88.6293%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="88.3793%" y="357" width="0.0312%" height="15" fill="rgb(207,120,37)" fg:x="5666" fg:w="2"/><text x="88.6293%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="88.3793%" y="341" width="0.0312%" height="15" fill="rgb(227,98,0)" fg:x="5666" fg:w="2"/><text x="88.6293%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="88.3793%" y="325" width="0.0312%" height="15" fill="rgb(207,7,3)" fg:x="5666" fg:w="2"/><text x="88.6293%" y="335.50"></text></g><g><title>run`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.08%)</title><rect x="88.3482%" y="405" width="0.0780%" height="15" fill="rgb(206,98,19)" fg:x="5664" fg:w="5"/><text x="88.5982%" y="415.50"></text></g><g><title>run`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="88.3637%" y="389" width="0.0624%" height="15" fill="rgb(217,5,26)" fg:x="5665" fg:w="4"/><text x="88.6137%" y="399.50"></text></g><g><title>run`core::str::pattern::TwoWaySearcher::next (1 samples, 0.02%)</title><rect x="88.4105%" y="373" width="0.0156%" height="15" fill="rgb(235,190,38)" fg:x="5668" fg:w="1"/><text x="88.6605%" y="383.50"></text></g><g><title>run`rusty_web_server::action::Action::from_parsed_http_request (14 samples, 0.22%)</title><rect x="88.2390%" y="437" width="0.2184%" height="15" fill="rgb(247,86,24)" fg:x="5657" fg:w="14"/><text x="88.4890%" y="447.50"></text></g><g><title>run`&lt;rusty_web_server::action::Operation as core::str::traits::FromStr&gt;::from_str (14 samples, 0.22%)</title><rect x="88.2390%" y="421" width="0.2184%" height="15" fill="rgb(205,101,16)" fg:x="5657" fg:w="14"/><text x="88.4890%" y="431.50"></text></g><g><title>run`core::str::pattern::StrSearcher::new (2 samples, 0.03%)</title><rect x="88.4261%" y="405" width="0.0312%" height="15" fill="rgb(246,168,33)" fg:x="5669" fg:w="2"/><text x="88.6761%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.02%)</title><rect x="88.4417%" y="389" width="0.0156%" height="15" fill="rgb(231,114,1)" fg:x="5670" fg:w="1"/><text x="88.6917%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (58 samples, 0.90%)</title><rect x="88.4573%" y="421" width="0.9047%" height="15" fill="rgb(207,184,53)" fg:x="5671" fg:w="58"/><text x="88.7073%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="89.3620%" y="421" width="0.0312%" height="15" fill="rgb(224,95,51)" fg:x="5729" fg:w="2"/><text x="89.6120%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="89.3620%" y="405" width="0.0312%" height="15" fill="rgb(212,188,45)" fg:x="5729" fg:w="2"/><text x="89.6120%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.03%)</title><rect x="89.3620%" y="389" width="0.0312%" height="15" fill="rgb(223,154,38)" fg:x="5729" fg:w="2"/><text x="89.6120%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="89.3620%" y="373" width="0.0312%" height="15" fill="rgb(251,22,52)" fg:x="5729" fg:w="2"/><text x="89.6120%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="89.3932%" y="421" width="0.0156%" height="15" fill="rgb(229,209,22)" fg:x="5731" fg:w="1"/><text x="89.6432%" y="431.50"></text></g><g><title>run`httparse::parse_headers_iter_uninit (2 samples, 0.03%)</title><rect x="89.4088%" y="389" width="0.0312%" height="15" fill="rgb(234,138,34)" fg:x="5732" fg:w="2"/><text x="89.6588%" y="399.50"></text></g><g><title>run`httparse::simd::avx2::match_url_char_32_avx (1 samples, 0.02%)</title><rect x="89.4400%" y="389" width="0.0156%" height="15" fill="rgb(212,95,11)" fg:x="5734" fg:w="1"/><text x="89.6900%" y="399.50"></text></g><g><title>run`rusty_web_server::request::ParsedHttpRequest::from_raw_http_request (65 samples, 1.01%)</title><rect x="88.4573%" y="437" width="1.0139%" height="15" fill="rgb(240,179,47)" fg:x="5671" fg:w="65"/><text x="88.7073%" y="447.50"></text></g><g><title>run`httparse::Request::parse (4 samples, 0.06%)</title><rect x="89.4088%" y="421" width="0.0624%" height="15" fill="rgb(240,163,11)" fg:x="5732" fg:w="4"/><text x="89.6588%" y="431.50"></text></g><g><title>run`httparse::Request::parse_with_uninit_headers (4 samples, 0.06%)</title><rect x="89.4088%" y="405" width="0.0624%" height="15" fill="rgb(236,37,12)" fg:x="5732" fg:w="4"/><text x="89.6588%" y="415.50"></text></g><g><title>run`httparse::simd::runtime::match_uri_vectored (1 samples, 0.02%)</title><rect x="89.4556%" y="389" width="0.0156%" height="15" fill="rgb(232,164,16)" fg:x="5735" fg:w="1"/><text x="89.7056%" y="399.50"></text></g><g><title>run`httparse::simd::avx2::match_url_char_32_avx (1 samples, 0.02%)</title><rect x="89.4556%" y="373" width="0.0156%" height="15" fill="rgb(244,205,15)" fg:x="5735" fg:w="1"/><text x="89.7056%" y="383.50"></text></g><g><title>run`std::os::unix::net::datagram::UnixDatagram::recv (1 samples, 0.02%)</title><rect x="89.4712%" y="437" width="0.0156%" height="15" fill="rgb(223,117,47)" fg:x="5736" fg:w="1"/><text x="89.7212%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.05%)</title><rect x="89.5336%" y="405" width="0.0468%" height="15" fill="rgb(244,107,35)" fg:x="5740" fg:w="3"/><text x="89.7836%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="89.5336%" y="389" width="0.0468%" height="15" fill="rgb(205,140,8)" fg:x="5740" fg:w="3"/><text x="89.7836%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.05%)</title><rect x="89.5336%" y="373" width="0.0468%" height="15" fill="rgb(228,84,46)" fg:x="5740" fg:w="3"/><text x="89.7836%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.05%)</title><rect x="89.5336%" y="357" width="0.0468%" height="15" fill="rgb(254,188,9)" fg:x="5740" fg:w="3"/><text x="89.7836%" y="367.50"></text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (8 samples, 0.12%)</title><rect x="89.4868%" y="437" width="0.1248%" height="15" fill="rgb(206,112,54)" fg:x="5737" fg:w="8"/><text x="89.7368%" y="447.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::send (8 samples, 0.12%)</title><rect x="89.4868%" y="421" width="0.1248%" height="15" fill="rgb(216,84,49)" fg:x="5737" fg:w="8"/><text x="89.7368%" y="431.50"></text></g><g><title>run`std::sync::mpsc::blocking::SignalToken::signal (2 samples, 0.03%)</title><rect x="89.5804%" y="405" width="0.0312%" height="15" fill="rgb(214,194,35)" fg:x="5743" fg:w="2"/><text x="89.8304%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.03%)</title><rect x="89.5804%" y="389" width="0.0312%" height="15" fill="rgb(249,28,3)" fg:x="5743" fg:w="2"/><text x="89.8304%" y="399.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__error (1 samples, 0.02%)</title><rect x="89.7208%" y="421" width="0.0156%" height="15" fill="rgb(222,56,52)" fg:x="5752" fg:w="1"/><text x="89.9708%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (10 samples, 0.16%)</title><rect x="89.7988%" y="405" width="0.1560%" height="15" fill="rgb(245,217,50)" fg:x="5757" fg:w="10"/><text x="90.0488%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.02%)</title><rect x="89.9704%" y="389" width="0.0156%" height="15" fill="rgb(213,201,24)" fg:x="5768" fg:w="1"/><text x="90.2204%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (40 samples, 0.62%)</title><rect x="89.9860%" y="389" width="0.6239%" height="15" fill="rgb(248,116,28)" fg:x="5769" fg:w="40"/><text x="90.2360%" y="399.50"></text></g><g><title>libsystem_c.dylib`nanosleep (73 samples, 1.14%)</title><rect x="89.7364%" y="421" width="1.1387%" height="15" fill="rgb(219,72,43)" fg:x="5753" fg:w="73"/><text x="89.9864%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (59 samples, 0.92%)</title><rect x="89.9548%" y="405" width="0.9203%" height="15" fill="rgb(209,138,14)" fg:x="5767" fg:w="59"/><text x="90.2048%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`mach_reply_port (17 samples, 0.27%)</title><rect x="90.6099%" y="389" width="0.2652%" height="15" fill="rgb(222,18,33)" fg:x="5809" fg:w="17"/><text x="90.8599%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__error (2 samples, 0.03%)</title><rect x="90.8751%" y="421" width="0.0312%" height="15" fill="rgb(213,199,7)" fg:x="5826" fg:w="2"/><text x="91.1251%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (400 samples, 6.24%)</title><rect x="90.9063%" y="421" width="6.2393%" height="15" fill="rgb(250,110,10)" fg:x="5828" fg:w="400"/><text x="91.1563%" y="431.50">libsyste..</text></g><g><title>run`rusty_junctions::function_transforms::unary::transform_send::_{{closure}} (588 samples, 9.17%)</title><rect x="88.0830%" y="453" width="9.1717%" height="15" fill="rgb(248,123,6)" fg:x="5647" fg:w="588"/><text x="88.3330%" y="463.50">run`rusty_jun..</text></g><g><title>run`std::thread::sleep (490 samples, 7.64%)</title><rect x="89.6116%" y="437" width="7.6431%" height="15" fill="rgb(206,91,31)" fg:x="5745" fg:w="490"/><text x="89.8616%" y="447.50">run`std::t..</text></g><g><title>libsystem_kernel.dylib`cerror (7 samples, 0.11%)</title><rect x="97.1455%" y="421" width="0.1092%" height="15" fill="rgb(211,154,13)" fg:x="6228" fg:w="7"/><text x="97.3955%" y="431.50"></text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (2 samples, 0.03%)</title><rect x="97.2547%" y="453" width="0.0312%" height="15" fill="rgb(225,148,7)" fg:x="6235" fg:w="2"/><text x="97.5047%" y="463.50"></text></g><g><title>run`std::sys_common::backtrace::__rust_begin_short_backtrace (2,018 samples, 31.48%)</title><rect x="65.8400%" y="469" width="31.4771%" height="15" fill="rgb(220,160,43)" fg:x="4221" fg:w="2018"/><text x="66.0900%" y="479.50">run`std::sys_common::backtrace::__rust_begin_short_..</text></g><g><title>run`std::thread::sleep (2 samples, 0.03%)</title><rect x="97.2859%" y="453" width="0.0312%" height="15" fill="rgb(213,52,39)" fg:x="6237" fg:w="2"/><text x="97.5359%" y="463.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (1 samples, 0.02%)</title><rect x="97.3327%" y="453" width="0.0156%" height="15" fill="rgb(243,137,7)" fg:x="6240" fg:w="1"/><text x="97.5827%" y="463.50"></text></g><g><title>dyld`dyld4::RuntimeState::addTLVTerminationFunc(void (*) (6 samples, 0.09%)</title><rect x="97.3483%" y="453" width="0.0936%" height="15" fill="rgb(230,79,13)" fg:x="6241" fg:w="6"/><text x="97.5983%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.09%)</title><rect x="97.3483%" y="437" width="0.0936%" height="15" fill="rgb(247,105,23)" fg:x="6241" fg:w="6"/><text x="97.5983%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.09%)</title><rect x="97.3483%" y="421" width="0.0936%" height="15" fill="rgb(223,179,41)" fg:x="6241" fg:w="6"/><text x="97.5983%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.09%)</title><rect x="97.3483%" y="405" width="0.0936%" height="15" fill="rgb(218,9,34)" fg:x="6241" fg:w="6"/><text x="97.5983%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.08%)</title><rect x="97.3639%" y="389" width="0.0780%" height="15" fill="rgb(222,106,8)" fg:x="6242" fg:w="5"/><text x="97.6139%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="97.6135%" y="421" width="0.0624%" height="15" fill="rgb(211,220,0)" fg:x="6258" fg:w="4"/><text x="97.8635%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="97.6291%" y="405" width="0.0468%" height="15" fill="rgb(229,52,16)" fg:x="6259" fg:w="3"/><text x="97.8791%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.05%)</title><rect x="97.6291%" y="389" width="0.0468%" height="15" fill="rgb(212,155,18)" fg:x="6259" fg:w="3"/><text x="97.8791%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="97.6603%" y="373" width="0.0156%" height="15" fill="rgb(242,21,14)" fg:x="6261" fg:w="1"/><text x="97.9103%" y="383.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (5 samples, 0.08%)</title><rect x="97.6135%" y="437" width="0.0780%" height="15" fill="rgb(222,19,48)" fg:x="6258" fg:w="5"/><text x="97.8635%" y="447.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_recursive_lock_lock_with_options (1 samples, 0.02%)</title><rect x="97.6759%" y="421" width="0.0156%" height="15" fill="rgb(232,45,27)" fg:x="6262" fg:w="1"/><text x="97.9259%" y="431.50"></text></g><g><title>dyld`dyld4::RuntimeState::withTLVLock(void (1 samples, 0.02%)</title><rect x="97.6915%" y="437" width="0.0156%" height="15" fill="rgb(249,103,42)" fg:x="6263" fg:w="1"/><text x="97.9415%" y="447.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::malloc (1 samples, 0.02%)</title><rect x="97.7071%" y="437" width="0.0156%" height="15" fill="rgb(246,81,33)" fg:x="6264" fg:w="1"/><text x="97.9571%" y="447.50"></text></g><g><title>libdyld.dylib`instantiateTLVs_thunk (2 samples, 0.03%)</title><rect x="97.7227%" y="437" width="0.0312%" height="15" fill="rgb(252,33,42)" fg:x="6265" fg:w="2"/><text x="97.9727%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.03%)</title><rect x="97.7539%" y="437" width="0.0312%" height="15" fill="rgb(209,212,41)" fg:x="6267" fg:w="2"/><text x="98.0039%" y="447.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.36%)</title><rect x="97.4419%" y="453" width="0.3588%" height="15" fill="rgb(207,154,6)" fg:x="6247" fg:w="23"/><text x="97.6919%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`pthread_setspecific (1 samples, 0.02%)</title><rect x="97.7851%" y="437" width="0.0156%" height="15" fill="rgb(223,64,47)" fg:x="6269" fg:w="1"/><text x="98.0351%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.05%)</title><rect x="97.8007%" y="453" width="0.0468%" height="15" fill="rgb(211,161,38)" fg:x="6270" fg:w="3"/><text x="98.0507%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="97.8007%" y="437" width="0.0468%" height="15" fill="rgb(219,138,40)" fg:x="6270" fg:w="3"/><text x="98.0507%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.05%)</title><rect x="97.8007%" y="421" width="0.0468%" height="15" fill="rgb(241,228,46)" fg:x="6270" fg:w="3"/><text x="98.0507%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.05%)</title><rect x="97.8007%" y="405" width="0.0468%" height="15" fill="rgb(223,209,38)" fg:x="6270" fg:w="3"/><text x="98.0507%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`pthread_setspecific (1 samples, 0.02%)</title><rect x="97.8474%" y="453" width="0.0156%" height="15" fill="rgb(236,164,45)" fg:x="6273" fg:w="1"/><text x="98.0974%" y="463.50"></text></g><g><title>run`std::sys_common::thread_info::set (39 samples, 0.61%)</title><rect x="97.3171%" y="469" width="0.6083%" height="15" fill="rgb(231,15,5)" fg:x="6239" fg:w="39"/><text x="97.5671%" y="479.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.06%)</title><rect x="97.8630%" y="453" width="0.0624%" height="15" fill="rgb(252,35,15)" fg:x="6274" fg:w="4"/><text x="98.1130%" y="463.50"></text></g><g><title>run`alloc::raw_vec::finish_grow (4 samples, 0.06%)</title><rect x="97.8630%" y="437" width="0.0624%" height="15" fill="rgb(248,181,18)" fg:x="6274" fg:w="4"/><text x="98.1130%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="97.8630%" y="421" width="0.0624%" height="15" fill="rgb(233,39,42)" fg:x="6274" fg:w="4"/><text x="98.1130%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.06%)</title><rect x="97.8630%" y="405" width="0.0624%" height="15" fill="rgb(238,110,33)" fg:x="6274" fg:w="4"/><text x="98.1130%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.06%)</title><rect x="97.8630%" y="389" width="0.0624%" height="15" fill="rgb(233,195,10)" fg:x="6274" fg:w="4"/><text x="98.1130%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="97.8942%" y="373" width="0.0312%" height="15" fill="rgb(254,105,3)" fg:x="6276" fg:w="2"/><text x="98.1442%" y="383.50"></text></g><g><title>run`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,110 samples, 32.91%)</title><rect x="65.0601%" y="485" width="32.9122%" height="15" fill="rgb(221,225,9)" fg:x="4171" fg:w="2110"/><text x="65.3101%" y="495.50">run`core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>run`std::thread::Thread::cname (3 samples, 0.05%)</title><rect x="97.9254%" y="469" width="0.0468%" height="15" fill="rgb(224,227,45)" fg:x="6278" fg:w="3"/><text x="98.1754%" y="479.50"></text></g><g><title>libsystem_c.dylib`getpagesize (1 samples, 0.02%)</title><rect x="98.3154%" y="469" width="0.0156%" height="15" fill="rgb(229,198,43)" fg:x="6303" fg:w="1"/><text x="98.5654%" y="479.50"></text></g><g><title>libsystem_c.dylib`sysconf (2 samples, 0.03%)</title><rect x="98.3310%" y="469" width="0.0312%" height="15" fill="rgb(206,209,35)" fg:x="6304" fg:w="2"/><text x="98.5810%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (101 samples, 1.58%)</title><rect x="98.3622%" y="469" width="1.5754%" height="15" fill="rgb(245,195,53)" fg:x="6306" fg:w="101"/><text x="98.6122%" y="479.50"></text></g><g><title>run`std::sys::unix::stack_overflow::imp::make_handler (128 samples, 2.00%)</title><rect x="97.9722%" y="485" width="1.9966%" height="15" fill="rgb(240,92,26)" fg:x="6281" fg:w="128"/><text x="98.2222%" y="495.50">r..</text></g><g><title>libsystem_kernel.dylib`mmap (2 samples, 0.03%)</title><rect x="99.9376%" y="469" width="0.0312%" height="15" fill="rgb(207,40,23)" fg:x="6407" fg:w="2"/><text x="100.1876%" y="479.50"></text></g><g><title>run`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="99.9688%" y="485" width="0.0156%" height="15" fill="rgb(223,111,35)" fg:x="6409" fg:w="1"/><text x="100.2188%" y="495.50"></text></g><g><title>all (6,411 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(229,147,28)" fg:x="0" fg:w="6411"/><text x="0.2500%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,774 samples, 90.06%)</title><rect x="9.9360%" y="533" width="90.0640%" height="15" fill="rgb(211,29,28)" fg:x="637" fg:w="5774"/><text x="10.1860%" y="543.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,533 samples, 86.30%)</title><rect x="13.6952%" y="517" width="86.3048%" height="15" fill="rgb(228,72,33)" fg:x="878" fg:w="5533"/><text x="13.9452%" y="527.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>run`std::sys::unix::thread::Thread::new::thread_start (2,382 samples, 37.15%)</title><rect x="62.8451%" y="501" width="37.1549%" height="15" fill="rgb(205,214,31)" fg:x="4029" fg:w="2382"/><text x="63.0951%" y="511.50">run`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>run`std::sys_common::thread_info::set (1 samples, 0.02%)</title><rect x="99.9844%" y="485" width="0.0156%" height="15" fill="rgb(224,111,15)" fg:x="6410" fg:w="1"/><text x="100.2344%" y="495.50"></text></g></svg></svg>