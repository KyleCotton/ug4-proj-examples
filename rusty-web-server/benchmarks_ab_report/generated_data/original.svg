<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="5083"><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0197%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="0.0393%" y="309" width="0.0197%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.2893%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="0.0393%" y="293" width="0.0197%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2893%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="0.0393%" y="277" width="0.0197%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2893%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="0.0393%" y="261" width="0.0197%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2893%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="0.0590%" y="309" width="0.0197%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3090%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__accept (78 samples, 1.53%)</title><rect x="0.2361%" y="277" width="1.5345%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="78"/><text x="0.4861%" y="287.50"></text></g><g><title>run`&lt;std::net::tcp::Incoming as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 1.77%)</title><rect x="0.0787%" y="309" width="1.7706%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="90"/><text x="0.3287%" y="319.50">r..</text></g><g><title>run`std::net::tcp::TcpListener::accept (82 samples, 1.61%)</title><rect x="0.2361%" y="293" width="1.6132%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="82"/><text x="0.4861%" y="303.50"></text></g><g><title>run`std::sys::unix::net::Socket::accept (4 samples, 0.08%)</title><rect x="1.7706%" y="277" width="0.0787%" height="15" fill="rgb(220,122,19)" fg:x="90" fg:w="4"/><text x="2.0206%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (4 samples, 0.08%)</title><rect x="1.7706%" y="261" width="0.0787%" height="15" fill="rgb(250,228,42)" fg:x="90" fg:w="4"/><text x="2.0206%" y="271.50"></text></g><g><title>libsystem_info.dylib`_gai_sort_list (1 samples, 0.02%)</title><rect x="1.8493%" y="229" width="0.0197%" height="15" fill="rgb(240,193,28)" fg:x="94" fg:w="1"/><text x="2.0993%" y="239.50"></text></g><g><title>libsystem_c.dylib`_qsort (1 samples, 0.02%)</title><rect x="1.8493%" y="213" width="0.0197%" height="15" fill="rgb(216,20,37)" fg:x="94" fg:w="1"/><text x="2.0993%" y="223.50"></text></g><g><title>libsystem_c.dylib`_isort (1 samples, 0.02%)</title><rect x="1.8493%" y="197" width="0.0197%" height="15" fill="rgb(206,188,39)" fg:x="94" fg:w="1"/><text x="2.0993%" y="207.50"></text></g><g><title>libsystem_info.dylib`si_destination_compare (1 samples, 0.02%)</title><rect x="1.8493%" y="181" width="0.0197%" height="15" fill="rgb(217,207,13)" fg:x="94" fg:w="1"/><text x="2.0993%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (1 samples, 0.02%)</title><rect x="1.8493%" y="165" width="0.0197%" height="15" fill="rgb(231,73,38)" fg:x="94" fg:w="1"/><text x="2.0993%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (1 samples, 0.02%)</title><rect x="1.8493%" y="149" width="0.0197%" height="15" fill="rgb(225,20,46)" fg:x="94" fg:w="1"/><text x="2.0993%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (1 samples, 0.02%)</title><rect x="1.8493%" y="133" width="0.0197%" height="15" fill="rgb(210,31,41)" fg:x="94" fg:w="1"/><text x="2.0993%" y="143.50"></text></g><g><title>libsystem_info.dylib`si_destination_compare_init_once (1 samples, 0.02%)</title><rect x="1.8493%" y="117" width="0.0197%" height="15" fill="rgb(221,200,47)" fg:x="94" fg:w="1"/><text x="2.0993%" y="127.50"></text></g><g><title>libsystem_trace.dylib`os_log_create (1 samples, 0.02%)</title><rect x="1.8493%" y="101" width="0.0197%" height="15" fill="rgb(226,26,5)" fg:x="94" fg:w="1"/><text x="2.0993%" y="111.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="1.8493%" y="85" width="0.0197%" height="15" fill="rgb(249,33,26)" fg:x="94" fg:w="1"/><text x="2.0993%" y="95.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="1.8493%" y="69" width="0.0197%" height="15" fill="rgb(235,183,28)" fg:x="94" fg:w="1"/><text x="2.0993%" y="79.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_init_slow (1 samples, 0.02%)</title><rect x="1.8493%" y="53" width="0.0197%" height="15" fill="rgb(221,5,38)" fg:x="94" fg:w="1"/><text x="2.0993%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (1 samples, 0.02%)</title><rect x="1.8493%" y="37" width="0.0197%" height="15" fill="rgb(247,18,42)" fg:x="94" fg:w="1"/><text x="2.0993%" y="47.50"></text></g><g><title>run`std::net::each_addr (2 samples, 0.04%)</title><rect x="1.8493%" y="309" width="0.0393%" height="15" fill="rgb(241,131,45)" fg:x="94" fg:w="2"/><text x="2.0993%" y="319.50"></text></g><g><title>run`&lt;str as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (2 samples, 0.04%)</title><rect x="1.8493%" y="293" width="0.0393%" height="15" fill="rgb(249,31,29)" fg:x="94" fg:w="2"/><text x="2.0993%" y="303.50"></text></g><g><title>run`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (2 samples, 0.04%)</title><rect x="1.8493%" y="277" width="0.0393%" height="15" fill="rgb(225,111,53)" fg:x="94" fg:w="2"/><text x="2.0993%" y="287.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (2 samples, 0.04%)</title><rect x="1.8493%" y="261" width="0.0393%" height="15" fill="rgb(238,160,17)" fg:x="94" fg:w="2"/><text x="2.0993%" y="271.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (2 samples, 0.04%)</title><rect x="1.8493%" y="245" width="0.0393%" height="15" fill="rgb(214,148,48)" fg:x="94" fg:w="2"/><text x="2.0993%" y="255.50"></text></g><g><title>libsystem_info.dylib`search_addrinfo (1 samples, 0.02%)</title><rect x="1.8690%" y="229" width="0.0197%" height="15" fill="rgb(232,36,49)" fg:x="95" fg:w="1"/><text x="2.1190%" y="239.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (1 samples, 0.02%)</title><rect x="1.8690%" y="213" width="0.0197%" height="15" fill="rgb(209,103,24)" fg:x="95" fg:w="1"/><text x="2.1190%" y="223.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (1 samples, 0.02%)</title><rect x="1.8690%" y="197" width="0.0197%" height="15" fill="rgb(229,88,8)" fg:x="95" fg:w="1"/><text x="2.1190%" y="207.50"></text></g><g><title>libsystem_info.dylib`si_inet_config (1 samples, 0.02%)</title><rect x="1.8690%" y="181" width="0.0197%" height="15" fill="rgb(213,181,19)" fg:x="95" fg:w="1"/><text x="2.1190%" y="191.50"></text></g><g><title>libsystem_notify.dylib`notify_register_check (1 samples, 0.02%)</title><rect x="1.8690%" y="165" width="0.0197%" height="15" fill="rgb(254,191,54)" fg:x="95" fg:w="1"/><text x="2.1190%" y="175.50"></text></g><g><title>libsystem_notify.dylib`0x00007ff805dc604b (1 samples, 0.02%)</title><rect x="1.8690%" y="149" width="0.0197%" height="15" fill="rgb(241,83,37)" fg:x="95" fg:w="1"/><text x="2.1190%" y="159.50"></text></g><g><title>libsystem_notify.dylib`0x00007ff805dc517e (1 samples, 0.02%)</title><rect x="1.8690%" y="133" width="0.0197%" height="15" fill="rgb(233,36,39)" fg:x="95" fg:w="1"/><text x="2.1190%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.02%)</title><rect x="1.8690%" y="117" width="0.0197%" height="15" fill="rgb(226,3,54)" fg:x="95" fg:w="1"/><text x="2.1190%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="1.8886%" y="293" width="0.0197%" height="15" fill="rgb(245,192,40)" fg:x="96" fg:w="1"/><text x="2.1386%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="1.9673%" y="277" width="0.0197%" height="15" fill="rgb(238,167,29)" fg:x="100" fg:w="1"/><text x="2.2173%" y="287.50"></text></g><g><title>dyld`start (105 samples, 2.07%)</title><rect x="0.0000%" y="405" width="2.0657%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="105"/><text x="0.2500%" y="415.50">d..</text></g><g><title>run`main (105 samples, 2.07%)</title><rect x="0.0000%" y="389" width="2.0657%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="105"/><text x="0.2500%" y="399.50">r..</text></g><g><title>run`std::rt::lang_start_internal (105 samples, 2.07%)</title><rect x="0.0000%" y="373" width="2.0657%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="105"/><text x="0.2500%" y="383.50">r..</text></g><g><title>run`std::rt::lang_start::_{{closure}} (105 samples, 2.07%)</title><rect x="0.0000%" y="357" width="2.0657%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="105"/><text x="0.2500%" y="367.50">r..</text></g><g><title>run`std::sys_common::backtrace::__rust_begin_short_backtrace (105 samples, 2.07%)</title><rect x="0.0000%" y="341" width="2.0657%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="105"/><text x="0.2500%" y="351.50">r..</text></g><g><title>run`&lt;rusty_web_server::server::original_server::OriginalServer as rusty_web_server::WebServer&gt;::run (104 samples, 2.05%)</title><rect x="0.0197%" y="325" width="2.0460%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="104"/><text x="0.2697%" y="335.50">r..</text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (9 samples, 0.18%)</title><rect x="1.8886%" y="309" width="0.1771%" height="15" fill="rgb(206,96,30)" fg:x="96" fg:w="9"/><text x="2.1386%" y="319.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::send (8 samples, 0.16%)</title><rect x="1.9083%" y="293" width="0.1574%" height="15" fill="rgb(218,138,4)" fg:x="97" fg:w="8"/><text x="2.1583%" y="303.50"></text></g><g><title>run`std::sync::mpsc::blocking::SignalToken::signal (4 samples, 0.08%)</title><rect x="1.9870%" y="277" width="0.0787%" height="15" fill="rgb(250,191,14)" fg:x="101" fg:w="4"/><text x="2.2370%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.08%)</title><rect x="1.9870%" y="261" width="0.0787%" height="15" fill="rgb(239,60,40)" fg:x="101" fg:w="4"/><text x="2.2370%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (315 samples, 6.20%)</title><rect x="2.0657%" y="405" width="6.1971%" height="15" fill="rgb(206,27,48)" fg:x="105" fg:w="315"/><text x="2.3157%" y="415.50">libsyste..</text></g><g><title>libsystem_kernel.dylib`__thread_selfid (13 samples, 0.26%)</title><rect x="12.6697%" y="389" width="0.2558%" height="15" fill="rgb(225,35,8)" fg:x="644" fg:w="13"/><text x="12.9197%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.02%)</title><rect x="12.9254%" y="389" width="0.0197%" height="15" fill="rgb(250,213,24)" fg:x="657" fg:w="1"/><text x="13.1754%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_markcancel_if_canceled (1 samples, 0.02%)</title><rect x="12.9451%" y="389" width="0.0197%" height="15" fill="rgb(247,123,22)" fg:x="658" fg:w="1"/><text x="13.1951%" y="399.50"></text></g><g><title>libsystem_c.dylib`sysconf (1 samples, 0.02%)</title><rect x="12.9845%" y="373" width="0.0197%" height="15" fill="rgb(231,138,38)" fg:x="660" fg:w="1"/><text x="13.2345%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (28 samples, 0.55%)</title><rect x="13.0041%" y="373" width="0.5509%" height="15" fill="rgb(231,145,46)" fg:x="661" fg:w="28"/><text x="13.2541%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1,398 samples, 27.50%)</title><rect x="13.5550%" y="373" width="27.5034%" height="15" fill="rgb(251,118,11)" fg:x="689" fg:w="1398"/><text x="13.8050%" y="383.50">libsystem_kernel.dylib`__munmap</text></g><g><title>libsystem_kernel.dylib`__sigaltstack (72 samples, 1.42%)</title><rect x="41.0584%" y="373" width="1.4165%" height="15" fill="rgb(217,147,25)" fg:x="2087" fg:w="72"/><text x="41.3084%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`munmap (3 samples, 0.06%)</title><rect x="42.4749%" y="373" width="0.0590%" height="15" fill="rgb(247,81,37)" fg:x="2159" fg:w="3"/><text x="42.7249%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__disable_threadsignal (1 samples, 0.02%)</title><rect x="42.5339%" y="373" width="0.0197%" height="15" fill="rgb(209,12,38)" fg:x="2162" fg:w="1"/><text x="42.7839%" y="383.50"></text></g><g><title>libdyld.dylib`dyld4::finalizeListTLV_thunk (1 samples, 0.02%)</title><rect x="42.6323%" y="357" width="0.0197%" height="15" fill="rgb(227,1,9)" fg:x="2167" fg:w="1"/><text x="42.8823%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (644 samples, 12.67%)</title><rect x="42.6520%" y="341" width="12.6697%" height="15" fill="rgb(248,47,43)" fg:x="2168" fg:w="644"/><text x="42.9020%" y="351.50">libsystem_kernel.dy..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (4 samples, 0.08%)</title><rect x="55.3217%" y="341" width="0.0787%" height="15" fill="rgb(221,10,30)" fg:x="2812" fg:w="4"/><text x="55.5717%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.02%)</title><rect x="55.5184%" y="325" width="0.0197%" height="15" fill="rgb(210,229,1)" fg:x="2822" fg:w="1"/><text x="55.7684%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_port_mod_refs (1 samples, 0.02%)</title><rect x="55.5381%" y="325" width="0.0197%" height="15" fill="rgb(222,148,37)" fg:x="2823" fg:w="1"/><text x="55.7881%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_mod_refs_trap (104 samples, 2.05%)</title><rect x="55.5971%" y="309" width="2.0460%" height="15" fill="rgb(234,67,33)" fg:x="2826" fg:w="104"/><text x="55.8471%" y="319.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (763 samples, 15.01%)</title><rect x="42.6520%" y="357" width="15.0108%" height="15" fill="rgb(247,98,35)" fg:x="2168" fg:w="763"/><text x="42.9020%" y="367.50">libsystem_pthread.dylib..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (115 samples, 2.26%)</title><rect x="55.4004%" y="341" width="2.2624%" height="15" fill="rgb(247,138,52)" fg:x="2816" fg:w="115"/><text x="55.6504%" y="351.50">l..</text></g><g><title>libsystem_kernel.dylib`mig_dealloc_reply_port (107 samples, 2.11%)</title><rect x="55.5577%" y="325" width="2.1051%" height="15" fill="rgb(213,79,30)" fg:x="2824" fg:w="107"/><text x="55.8077%" y="335.50">l..</text></g><g><title>libsystem_kernel.dylib`mach_port_mod_refs (1 samples, 0.02%)</title><rect x="57.6431%" y="309" width="0.0197%" height="15" fill="rgb(246,177,23)" fg:x="2930" fg:w="1"/><text x="57.8931%" y="319.50"></text></g><g><title>dyld`dyld4::RuntimeState::TLV_TerminatorList::reverseWalkChain(void (8 samples, 0.16%)</title><rect x="58.9416%" y="325" width="0.1574%" height="15" fill="rgb(230,62,27)" fg:x="2996" fg:w="8"/><text x="59.1916%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="59.2367%" y="293" width="0.0197%" height="15" fill="rgb(216,154,8)" fg:x="3011" fg:w="1"/><text x="59.4867%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.10%)</title><rect x="59.2563%" y="293" width="0.0984%" height="15" fill="rgb(244,35,45)" fg:x="3012" fg:w="5"/><text x="59.5063%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="59.3154%" y="277" width="0.0393%" height="15" fill="rgb(251,115,12)" fg:x="3015" fg:w="2"/><text x="59.5654%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="59.3547%" y="293" width="0.0197%" height="15" fill="rgb(240,54,50)" fg:x="3017" fg:w="1"/><text x="59.6047%" y="303.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (22 samples, 0.43%)</title><rect x="59.0990%" y="325" width="0.4328%" height="15" fill="rgb(233,84,52)" fg:x="3004" fg:w="22"/><text x="59.3490%" y="335.50"></text></g><g><title>run`std::sys::unix::thread_local_dtor::register_dtor::run_dtors (22 samples, 0.43%)</title><rect x="59.0990%" y="309" width="0.4328%" height="15" fill="rgb(207,117,47)" fg:x="3004" fg:w="22"/><text x="59.3490%" y="319.50"></text></g><g><title>run`std::sys_common::thread_info::THREAD_INFO::__getit::destroy (8 samples, 0.16%)</title><rect x="59.3744%" y="293" width="0.1574%" height="15" fill="rgb(249,43,39)" fg:x="3018" fg:w="8"/><text x="59.6244%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="59.5318%" y="325" width="0.0393%" height="15" fill="rgb(209,38,44)" fg:x="3026" fg:w="2"/><text x="59.7818%" y="335.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (35 samples, 0.69%)</title><rect x="58.9219%" y="341" width="0.6886%" height="15" fill="rgb(236,212,23)" fg:x="2995" fg:w="35"/><text x="59.1719%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (2 samples, 0.04%)</title><rect x="59.5711%" y="325" width="0.0393%" height="15" fill="rgb(242,79,21)" fg:x="3028" fg:w="2"/><text x="59.8211%" y="335.50"></text></g><g><title>libdyld.dylib`dyld4::finalizeListTLV_thunk (1 samples, 0.02%)</title><rect x="59.6105%" y="341" width="0.0197%" height="15" fill="rgb(211,96,35)" fg:x="3030" fg:w="1"/><text x="59.8605%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.10%)</title><rect x="59.6301%" y="325" width="0.0984%" height="15" fill="rgb(253,215,40)" fg:x="3031" fg:w="5"/><text x="59.8801%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="59.6301%" y="341" width="0.1180%" height="15" fill="rgb(211,81,21)" fg:x="3031" fg:w="6"/><text x="59.8801%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="59.7285%" y="325" width="0.0197%" height="15" fill="rgb(208,190,38)" fg:x="3036" fg:w="1"/><text x="59.9785%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (876 samples, 17.23%)</title><rect x="42.5536%" y="373" width="17.2339%" height="15" fill="rgb(235,213,38)" fg:x="2163" fg:w="876"/><text x="42.8036%" y="383.50">libsystem_pthread.dylib`_pt..</text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (108 samples, 2.12%)</title><rect x="57.6628%" y="357" width="2.1247%" height="15" fill="rgb(237,122,38)" fg:x="2931" fg:w="108"/><text x="57.9128%" y="367.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="59.7482%" y="341" width="0.0393%" height="15" fill="rgb(244,218,35)" fg:x="3037" fg:w="2"/><text x="59.9982%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_setcancelstate_exit (1 samples, 0.02%)</title><rect x="59.7875%" y="373" width="0.0197%" height="15" fill="rgb(240,68,47)" fg:x="3039" fg:w="1"/><text x="60.0375%" y="383.50"></text></g><g><title>run`DYLD-STUB$$sysconf (1 samples, 0.02%)</title><rect x="59.8072%" y="373" width="0.0197%" height="15" fill="rgb(210,16,53)" fg:x="3040" fg:w="1"/><text x="60.0572%" y="383.50"></text></g><g><title>run`core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.04%)</title><rect x="59.8269%" y="373" width="0.0393%" height="15" fill="rgb(235,124,12)" fg:x="3041" fg:w="2"/><text x="60.0769%" y="383.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sigaltstack (1 samples, 0.02%)</title><rect x="60.0630%" y="357" width="0.0197%" height="15" fill="rgb(224,169,11)" fg:x="3053" fg:w="1"/><text x="60.3130%" y="367.50"></text></g><g><title>libsystem_c.dylib`sigaltstack (2 samples, 0.04%)</title><rect x="60.0826%" y="357" width="0.0393%" height="15" fill="rgb(250,166,2)" fg:x="3054" fg:w="2"/><text x="60.3326%" y="367.50"></text></g><g><title>libsystem_c.dylib`sysconf (7 samples, 0.14%)</title><rect x="60.1220%" y="357" width="0.1377%" height="15" fill="rgb(242,216,29)" fg:x="3056" fg:w="7"/><text x="60.3720%" y="367.50"></text></g><g><title>libsystem_c.dylib`getpagesize (1 samples, 0.02%)</title><rect x="60.2400%" y="341" width="0.0197%" height="15" fill="rgb(230,116,27)" fg:x="3062" fg:w="1"/><text x="60.4900%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (67 samples, 1.32%)</title><rect x="60.2597%" y="357" width="1.3181%" height="15" fill="rgb(228,99,48)" fg:x="3063" fg:w="67"/><text x="60.5097%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (35 samples, 0.69%)</title><rect x="61.5778%" y="357" width="0.6886%" height="15" fill="rgb(253,11,6)" fg:x="3130" fg:w="35"/><text x="61.8278%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`munmap (1 samples, 0.02%)</title><rect x="62.2664%" y="357" width="0.0197%" height="15" fill="rgb(247,143,39)" fg:x="3165" fg:w="1"/><text x="62.5164%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="62.2861%" y="357" width="0.1180%" height="15" fill="rgb(236,97,10)" fg:x="3166" fg:w="6"/><text x="62.5361%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.12%)</title><rect x="62.2861%" y="341" width="0.1180%" height="15" fill="rgb(233,208,19)" fg:x="3166" fg:w="6"/><text x="62.5361%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.18%)</title><rect x="62.4041%" y="357" width="0.1771%" height="15" fill="rgb(216,164,2)" fg:x="3172" fg:w="9"/><text x="62.6541%" y="367.50"></text></g><g><title>dyld`dyld4::APIs::_tlv_atexit(void (*) (1 samples, 0.02%)</title><rect x="62.8763%" y="341" width="0.0197%" height="15" fill="rgb(220,129,5)" fg:x="3196" fg:w="1"/><text x="63.1263%" y="351.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="62.8959%" y="341" width="0.0197%" height="15" fill="rgb(242,17,10)" fg:x="3197" fg:w="1"/><text x="63.1459%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.10%)</title><rect x="62.9156%" y="341" width="0.0984%" height="15" fill="rgb(242,107,0)" fg:x="3198" fg:w="5"/><text x="63.1656%" y="351.50"></text></g><g><title>run`__rdl_dealloc (5 samples, 0.10%)</title><rect x="63.0140%" y="341" width="0.0984%" height="15" fill="rgb(251,28,31)" fg:x="3203" fg:w="5"/><text x="63.2640%" y="351.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;&lt;rusty_junctions::patterns::n4ary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire::{{closure}}&gt; (5 samples, 0.10%)</title><rect x="63.1123%" y="341" width="0.0984%" height="15" fill="rgb(233,223,10)" fg:x="3208" fg:w="5"/><text x="63.3623%" y="351.50"></text></g><g><title>run`rusty_junctions::function_transforms::ternary::transform_send::_{{closure}} (2 samples, 0.04%)</title><rect x="63.2107%" y="341" width="0.0393%" height="15" fill="rgb(215,21,27)" fg:x="3213" fg:w="2"/><text x="63.4607%" y="351.50"></text></g><g><title>run`rusty_junctions::function_transforms::unary::transform_send::_{{closure}} (1 samples, 0.02%)</title><rect x="63.2500%" y="341" width="0.0197%" height="15" fill="rgb(232,23,21)" fg:x="3215" fg:w="1"/><text x="63.5000%" y="351.50"></text></g><g><title>run`std::sys::unix::thread::guard::current (1 samples, 0.02%)</title><rect x="63.2697%" y="341" width="0.0197%" height="15" fill="rgb(244,5,23)" fg:x="3216" fg:w="1"/><text x="63.5197%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_get_stacksize_np (1 samples, 0.02%)</title><rect x="63.2697%" y="325" width="0.0197%" height="15" fill="rgb(226,81,46)" fg:x="3216" fg:w="1"/><text x="63.5197%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.33%)</title><rect x="63.4665%" y="309" width="0.3344%" height="15" fill="rgb(247,70,30)" fg:x="3226" fg:w="17"/><text x="63.7165%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.45%)</title><rect x="63.3681%" y="325" width="0.4525%" height="15" fill="rgb(212,68,19)" fg:x="3221" fg:w="23"/><text x="63.6181%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="63.8009%" y="309" width="0.0197%" height="15" fill="rgb(240,187,13)" fg:x="3243" fg:w="1"/><text x="64.0509%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.04%)</title><rect x="63.8206%" y="325" width="0.0393%" height="15" fill="rgb(223,113,26)" fg:x="3244" fg:w="2"/><text x="64.0706%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.12%)</title><rect x="63.8599%" y="325" width="0.1180%" height="15" fill="rgb(206,192,2)" fg:x="3246" fg:w="6"/><text x="64.1099%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="63.9780%" y="325" width="0.0197%" height="15" fill="rgb(241,108,4)" fg:x="3252" fg:w="1"/><text x="64.2280%" y="335.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="63.9976%" y="325" width="0.0197%" height="15" fill="rgb(247,173,49)" fg:x="3253" fg:w="1"/><text x="64.2476%" y="335.50"></text></g><g><title>run`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.04%)</title><rect x="64.0173%" y="325" width="0.0393%" height="15" fill="rgb(224,114,35)" fg:x="3254" fg:w="2"/><text x="64.2673%" y="335.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::unary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (1 samples, 0.02%)</title><rect x="64.0567%" y="325" width="0.0197%" height="15" fill="rgb(245,159,27)" fg:x="3256" fg:w="1"/><text x="64.3067%" y="335.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::unary::SendJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire (1 samples, 0.02%)</title><rect x="64.0763%" y="325" width="0.0197%" height="15" fill="rgb(245,172,44)" fg:x="3257" fg:w="1"/><text x="64.3263%" y="335.50"></text></g><g><title>run`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="64.0960%" y="325" width="0.0197%" height="15" fill="rgb(236,23,11)" fg:x="3258" fg:w="1"/><text x="64.3460%" y="335.50"></text></g><g><title>run`__rdl_dealloc (1 samples, 0.02%)</title><rect x="64.1157%" y="325" width="0.0197%" height="15" fill="rgb(205,117,38)" fg:x="3259" fg:w="1"/><text x="64.3657%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.14%)</title><rect x="64.1550%" y="309" width="0.1377%" height="15" fill="rgb(237,72,25)" fg:x="3261" fg:w="7"/><text x="64.4050%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.14%)</title><rect x="64.1550%" y="293" width="0.1377%" height="15" fill="rgb(244,70,9)" fg:x="3261" fg:w="7"/><text x="64.4050%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.08%)</title><rect x="64.2927%" y="309" width="0.0787%" height="15" fill="rgb(217,125,39)" fg:x="3268" fg:w="4"/><text x="64.5427%" y="319.50"></text></g><g><title>run`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="64.3714%" y="309" width="0.0393%" height="15" fill="rgb(235,36,10)" fg:x="3272" fg:w="2"/><text x="64.6214%" y="319.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="64.4108%" y="277" width="0.0197%" height="15" fill="rgb(251,123,47)" fg:x="3274" fg:w="1"/><text x="64.6608%" y="287.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::ternary::transform_send&lt;&lt;rusty_web_server::server::original_server::OriginalServer as rusty_web_server::WebServer&gt;::run::{{closure}},(i64,rusty_web_server::request::RawHttpRequest),rusty_web_server::server::original_server::Metrics,i64&gt;::{{closure}}&gt; (3 samples, 0.06%)</title><rect x="64.4108%" y="309" width="0.0590%" height="15" fill="rgb(221,13,13)" fg:x="3274" fg:w="3"/><text x="64.6608%" y="319.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rusty_junctions::types::Packet&gt;&gt; (3 samples, 0.06%)</title><rect x="64.4108%" y="293" width="0.0590%" height="15" fill="rgb(238,131,9)" fg:x="3274" fg:w="3"/><text x="64.6608%" y="303.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (2 samples, 0.04%)</title><rect x="64.4305%" y="277" width="0.0393%" height="15" fill="rgb(211,50,8)" fg:x="3275" fg:w="2"/><text x="64.6805%" y="287.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="64.4895%" y="277" width="0.0590%" height="15" fill="rgb(245,182,24)" fg:x="3278" fg:w="3"/><text x="64.7395%" y="287.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::unary::transform_send&lt;&lt;rusty_web_server::server::original_server::OriginalServer as rusty_web_server::WebServer&gt;::run::{{closure}},rusty_web_server::action::Action&gt;::{{closure}}&gt; (11 samples, 0.22%)</title><rect x="64.4698%" y="309" width="0.2164%" height="15" fill="rgb(242,14,37)" fg:x="3277" fg:w="11"/><text x="64.7198%" y="319.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rusty_junctions::types::Packet&gt;&gt; (11 samples, 0.22%)</title><rect x="64.4698%" y="293" width="0.2164%" height="15" fill="rgb(246,228,12)" fg:x="3277" fg:w="11"/><text x="64.7198%" y="303.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (7 samples, 0.14%)</title><rect x="64.5485%" y="277" width="0.1377%" height="15" fill="rgb(213,55,15)" fg:x="3281" fg:w="7"/><text x="64.7985%" y="287.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.08%)</title><rect x="64.7059%" y="293" width="0.0787%" height="15" fill="rgb(209,9,3)" fg:x="3289" fg:w="4"/><text x="64.9559%" y="303.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;&lt;rusty_junctions::patterns::n4ary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire::{{closure}}&gt; (36 samples, 0.71%)</title><rect x="64.1354%" y="325" width="0.7082%" height="15" fill="rgb(230,59,30)" fg:x="3260" fg:w="36"/><text x="64.3854%" y="335.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;rusty_junctions::types::Packet&gt;&gt; (8 samples, 0.16%)</title><rect x="64.6862%" y="309" width="0.1574%" height="15" fill="rgb(209,121,21)" fg:x="3288" fg:w="8"/><text x="64.9362%" y="319.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::drop_chan (3 samples, 0.06%)</title><rect x="64.7846%" y="293" width="0.0590%" height="15" fill="rgb(220,109,13)" fg:x="3293" fg:w="3"/><text x="65.0346%" y="303.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::ternary::transform_send&lt;&lt;rusty_web_server::server::original_server::OriginalServer as rusty_web_server::WebServer&gt;::run::{{closure}},(i64,rusty_web_server::request::RawHttpRequest),rusty_web_server::server::original_server::Metrics,i64&gt;::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="64.8436%" y="325" width="0.0393%" height="15" fill="rgb(232,18,1)" fg:x="3296" fg:w="2"/><text x="65.0936%" y="335.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::unary::transform_send&lt;&lt;rusty_web_server::server::original_server::OriginalServer as rusty_web_server::WebServer&gt;::run::{{closure}},rusty_web_server::action::Action&gt;::{{closure}}&gt; (3 samples, 0.06%)</title><rect x="64.8829%" y="325" width="0.0590%" height="15" fill="rgb(215,41,42)" fg:x="3298" fg:w="3"/><text x="65.1329%" y="335.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;rusty_junctions::function_transforms::unary::transform_send&lt;&lt;rusty_web_server::server::original_server::OriginalServer as rusty_web_server::WebServer&gt;::run::{{closure}},rusty_web_server::request::RawHttpRequest&gt;::{{closure}}&gt; (2 samples, 0.04%)</title><rect x="64.9420%" y="325" width="0.0393%" height="15" fill="rgb(224,123,36)" fg:x="3301" fg:w="2"/><text x="65.1920%" y="335.50"></text></g><g><title>run`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="64.9813%" y="325" width="0.0197%" height="15" fill="rgb(240,125,3)" fg:x="3303" fg:w="1"/><text x="65.2313%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="65.0600%" y="309" width="0.0590%" height="15" fill="rgb(205,98,50)" fg:x="3307" fg:w="3"/><text x="65.3100%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="65.0797%" y="293" width="0.0393%" height="15" fill="rgb(205,185,37)" fg:x="3308" fg:w="2"/><text x="65.3297%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="65.0797%" y="277" width="0.0393%" height="15" fill="rgb(238,207,15)" fg:x="3308" fg:w="2"/><text x="65.3297%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="65.0797%" y="261" width="0.0393%" height="15" fill="rgb(213,199,42)" fg:x="3308" fg:w="2"/><text x="65.3297%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="65.1190%" y="309" width="0.0197%" height="15" fill="rgb(235,201,11)" fg:x="3310" fg:w="1"/><text x="65.3690%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="65.1190%" y="293" width="0.0197%" height="15" fill="rgb(207,46,11)" fg:x="3310" fg:w="1"/><text x="65.3690%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="65.1387%" y="309" width="0.0197%" height="15" fill="rgb(241,35,35)" fg:x="3311" fg:w="1"/><text x="65.3887%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="65.2764%" y="277" width="0.0197%" height="15" fill="rgb(243,32,47)" fg:x="3318" fg:w="1"/><text x="65.5264%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="65.2961%" y="277" width="0.0393%" height="15" fill="rgb(247,202,23)" fg:x="3319" fg:w="2"/><text x="65.5461%" y="287.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::ternary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (1 samples, 0.02%)</title><rect x="65.3354%" y="277" width="0.0197%" height="15" fill="rgb(219,102,11)" fg:x="3321" fg:w="1"/><text x="65.5854%" y="287.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="65.3551%" y="277" width="0.0787%" height="15" fill="rgb(243,110,44)" fg:x="3322" fg:w="4"/><text x="65.6051%" y="287.50"></text></g><g><title>run`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.02%)</title><rect x="65.4141%" y="261" width="0.0197%" height="15" fill="rgb(222,74,54)" fg:x="3325" fg:w="1"/><text x="65.6641%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="65.6305%" y="261" width="0.0393%" height="15" fill="rgb(216,99,12)" fg:x="3336" fg:w="2"/><text x="65.8805%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.14%)</title><rect x="65.7092%" y="245" width="0.1377%" height="15" fill="rgb(226,22,26)" fg:x="3340" fg:w="7"/><text x="65.9592%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.20%)</title><rect x="65.6699%" y="261" width="0.1967%" height="15" fill="rgb(217,163,10)" fg:x="3338" fg:w="10"/><text x="65.9199%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="65.8469%" y="245" width="0.0197%" height="15" fill="rgb(213,25,53)" fg:x="3347" fg:w="1"/><text x="66.0969%" y="255.50"></text></g><g><title>run`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="65.8666%" y="261" width="0.0197%" height="15" fill="rgb(252,105,26)" fg:x="3348" fg:w="1"/><text x="66.1166%" y="271.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::ternary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (1 samples, 0.02%)</title><rect x="65.8863%" y="261" width="0.0197%" height="15" fill="rgb(220,39,43)" fg:x="3349" fg:w="1"/><text x="66.1363%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="65.8863%" y="245" width="0.0197%" height="15" fill="rgb(229,68,48)" fg:x="3349" fg:w="1"/><text x="66.1363%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="65.8863%" y="229" width="0.0197%" height="15" fill="rgb(252,8,32)" fg:x="3349" fg:w="1"/><text x="66.1363%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="65.8863%" y="213" width="0.0197%" height="15" fill="rgb(223,20,43)" fg:x="3349" fg:w="1"/><text x="66.1363%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="65.8863%" y="197" width="0.0197%" height="15" fill="rgb(229,81,49)" fg:x="3349" fg:w="1"/><text x="66.1363%" y="207.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="65.9060%" y="261" width="0.0590%" height="15" fill="rgb(236,28,36)" fg:x="3350" fg:w="3"/><text x="66.1560%" y="271.50"></text></g><g><title>run`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.02%)</title><rect x="65.9650%" y="261" width="0.0197%" height="15" fill="rgb(249,185,26)" fg:x="3353" fg:w="1"/><text x="66.2150%" y="271.50"></text></g><g><title>run`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (54 samples, 1.06%)</title><rect x="65.1584%" y="309" width="1.0624%" height="15" fill="rgb(249,174,33)" fg:x="3312" fg:w="54"/><text x="65.4084%" y="319.50"></text></g><g><title>run`rusty_junctions::controller::alive::_&lt;impl rusty_junctions::controller::Controller&gt;::is_alive (52 samples, 1.02%)</title><rect x="65.1977%" y="293" width="1.0230%" height="15" fill="rgb(233,201,37)" fg:x="3314" fg:w="52"/><text x="65.4477%" y="303.50"></text></g><g><title>run`rusty_junctions::join_pattern::JoinPattern::is_alive (40 samples, 0.79%)</title><rect x="65.4338%" y="277" width="0.7869%" height="15" fill="rgb(221,78,26)" fg:x="3326" fg:w="40"/><text x="65.6838%" y="287.50"></text></g><g><title>run`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.24%)</title><rect x="65.9847%" y="261" width="0.2361%" height="15" fill="rgb(250,127,30)" fg:x="3354" fg:w="12"/><text x="66.2347%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.22%)</title><rect x="66.0043%" y="245" width="0.2164%" height="15" fill="rgb(230,49,44)" fg:x="3355" fg:w="11"/><text x="66.2543%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.20%)</title><rect x="66.0240%" y="229" width="0.1967%" height="15" fill="rgb(229,67,23)" fg:x="3356" fg:w="10"/><text x="66.2740%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.16%)</title><rect x="66.0633%" y="213" width="0.1574%" height="15" fill="rgb(249,83,47)" fg:x="3358" fg:w="8"/><text x="66.3133%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.08%)</title><rect x="66.1420%" y="197" width="0.0787%" height="15" fill="rgb(215,43,3)" fg:x="3362" fg:w="4"/><text x="66.3920%" y="207.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::ternary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (1 samples, 0.02%)</title><rect x="66.2207%" y="309" width="0.0197%" height="15" fill="rgb(238,154,13)" fg:x="3366" fg:w="1"/><text x="66.4707%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="66.2207%" y="293" width="0.0197%" height="15" fill="rgb(219,56,2)" fg:x="3366" fg:w="1"/><text x="66.4707%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="66.2207%" y="277" width="0.0197%" height="15" fill="rgb(233,0,4)" fg:x="3366" fg:w="1"/><text x="66.4707%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="66.2207%" y="261" width="0.0197%" height="15" fill="rgb(235,30,7)" fg:x="3366" fg:w="1"/><text x="66.4707%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="66.2207%" y="245" width="0.0197%" height="15" fill="rgb(250,79,13)" fg:x="3366" fg:w="1"/><text x="66.4707%" y="255.50"></text></g><g><title>run`&lt;F as rusty_junctions::functions::ternary::FnBoxClone&gt;::clone_box (4 samples, 0.08%)</title><rect x="66.2601%" y="293" width="0.0787%" height="15" fill="rgb(211,146,34)" fg:x="3368" fg:w="4"/><text x="66.5101%" y="303.50"></text></g><g><title>run`&lt;std::sync::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="66.2798%" y="277" width="0.0590%" height="15" fill="rgb(228,22,38)" fg:x="3369" fg:w="3"/><text x="66.5298%" y="287.50"></text></g><g><title>run`std::sys_common::thread::min_stack (1 samples, 0.02%)</title><rect x="66.3388%" y="293" width="0.0197%" height="15" fill="rgb(235,168,5)" fg:x="3372" fg:w="1"/><text x="66.5888%" y="303.50"></text></g><g><title>run`std::thread::Builder::new (1 samples, 0.02%)</title><rect x="66.3584%" y="293" width="0.0197%" height="15" fill="rgb(221,155,16)" fg:x="3373" fg:w="1"/><text x="66.6084%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.08%)</title><rect x="66.4175%" y="277" width="0.0787%" height="15" fill="rgb(215,215,53)" fg:x="3376" fg:w="4"/><text x="66.6675%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.08%)</title><rect x="66.4175%" y="261" width="0.0787%" height="15" fill="rgb(223,4,10)" fg:x="3376" fg:w="4"/><text x="66.6675%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.08%)</title><rect x="66.4175%" y="245" width="0.0787%" height="15" fill="rgb(234,103,6)" fg:x="3376" fg:w="4"/><text x="66.6675%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.08%)</title><rect x="66.4175%" y="229" width="0.0787%" height="15" fill="rgb(227,97,0)" fg:x="3376" fg:w="4"/><text x="66.6675%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_attr_setstacksize (1 samples, 0.02%)</title><rect x="66.4962%" y="277" width="0.0197%" height="15" fill="rgb(234,150,53)" fg:x="3380" fg:w="1"/><text x="66.7462%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_create (1 samples, 0.02%)</title><rect x="66.5158%" y="277" width="0.0197%" height="15" fill="rgb(228,201,54)" fg:x="3381" fg:w="1"/><text x="66.7658%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (94 samples, 1.85%)</title><rect x="66.5355%" y="261" width="1.8493%" height="15" fill="rgb(222,22,37)" fg:x="3382" fg:w="94"/><text x="66.7855%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="68.3848%" y="261" width="0.0197%" height="15" fill="rgb(237,53,32)" fg:x="3476" fg:w="1"/><text x="68.6348%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="68.3848%" y="245" width="0.0197%" height="15" fill="rgb(233,25,53)" fg:x="3476" fg:w="1"/><text x="68.6348%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="68.3848%" y="229" width="0.0197%" height="15" fill="rgb(210,40,34)" fg:x="3476" fg:w="1"/><text x="68.6348%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="68.3848%" y="213" width="0.0197%" height="15" fill="rgb(241,220,44)" fg:x="3476" fg:w="1"/><text x="68.6348%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (41 samples, 0.81%)</title><rect x="69.6833%" y="245" width="0.8066%" height="15" fill="rgb(235,28,35)" fg:x="3542" fg:w="41"/><text x="69.9333%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (21 samples, 0.41%)</title><rect x="70.4899%" y="245" width="0.4131%" height="15" fill="rgb(210,56,17)" fg:x="3583" fg:w="21"/><text x="70.7399%" y="255.50"></text></g><g><title>run`std::sys::unix::thread::Thread::new (223 samples, 4.39%)</title><rect x="66.5355%" y="277" width="4.3872%" height="15" fill="rgb(224,130,29)" fg:x="3382" fg:w="223"/><text x="66.7855%" y="287.50">run`s..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (128 samples, 2.52%)</title><rect x="68.4045%" y="261" width="2.5182%" height="15" fill="rgb(235,212,8)" fg:x="3477" fg:w="128"/><text x="68.6545%" y="271.50">li..</text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.02%)</title><rect x="70.9030%" y="245" width="0.0197%" height="15" fill="rgb(223,33,50)" fg:x="3604" fg:w="1"/><text x="71.1530%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="70.9227%" y="261" width="0.0197%" height="15" fill="rgb(219,149,13)" fg:x="3605" fg:w="1"/><text x="71.1727%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="70.9227%" y="245" width="0.0197%" height="15" fill="rgb(250,156,29)" fg:x="3605" fg:w="1"/><text x="71.1727%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="70.9227%" y="229" width="0.0197%" height="15" fill="rgb(216,193,19)" fg:x="3605" fg:w="1"/><text x="71.1727%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="70.9227%" y="213" width="0.0197%" height="15" fill="rgb(216,135,14)" fg:x="3605" fg:w="1"/><text x="71.1727%" y="223.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::ternary::SendJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire (241 samples, 4.74%)</title><rect x="66.2404%" y="309" width="4.7413%" height="15" fill="rgb(241,47,5)" fg:x="3367" fg:w="241"/><text x="66.4904%" y="319.50">run`&lt;r..</text></g><g><title>run`std::thread::spawn (234 samples, 4.60%)</title><rect x="66.3781%" y="293" width="4.6036%" height="15" fill="rgb(233,42,35)" fg:x="3374" fg:w="234"/><text x="66.6281%" y="303.50">run`s..</text></g><g><title>run`std::thread::Thread::new (3 samples, 0.06%)</title><rect x="70.9227%" y="277" width="0.0590%" height="15" fill="rgb(231,13,6)" fg:x="3605" fg:w="3"/><text x="71.1727%" y="287.50"></text></g><g><title>run`std::sys_common::mutex::MovableMutex::new (2 samples, 0.04%)</title><rect x="70.9424%" y="261" width="0.0393%" height="15" fill="rgb(207,181,40)" fg:x="3606" fg:w="2"/><text x="71.1924%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="70.9424%" y="245" width="0.0393%" height="15" fill="rgb(254,173,49)" fg:x="3606" fg:w="2"/><text x="71.1924%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="70.9620%" y="229" width="0.0197%" height="15" fill="rgb(221,1,38)" fg:x="3607" fg:w="1"/><text x="71.2120%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="70.9620%" y="213" width="0.0197%" height="15" fill="rgb(206,124,46)" fg:x="3607" fg:w="1"/><text x="71.2120%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="70.9620%" y="197" width="0.0197%" height="15" fill="rgb(249,21,11)" fg:x="3607" fg:w="1"/><text x="71.2120%" y="207.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::unary::RecvJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::channels (1 samples, 0.02%)</title><rect x="70.9817%" y="309" width="0.0197%" height="15" fill="rgb(222,201,40)" fg:x="3608" fg:w="1"/><text x="71.2317%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="70.9817%" y="293" width="0.0197%" height="15" fill="rgb(235,61,29)" fg:x="3608" fg:w="1"/><text x="71.2317%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="70.9817%" y="277" width="0.0197%" height="15" fill="rgb(219,207,3)" fg:x="3608" fg:w="1"/><text x="71.2317%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="70.9817%" y="261" width="0.0197%" height="15" fill="rgb(222,56,46)" fg:x="3608" fg:w="1"/><text x="71.2317%" y="271.50"></text></g><g><title>run`&lt;F as rusty_junctions::functions::unary::FnBoxClone&gt;::clone_box (1 samples, 0.02%)</title><rect x="71.0407%" y="293" width="0.0197%" height="15" fill="rgb(239,76,54)" fg:x="3611" fg:w="1"/><text x="71.2907%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="71.0407%" y="277" width="0.0197%" height="15" fill="rgb(231,124,27)" fg:x="3611" fg:w="1"/><text x="71.2907%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="71.0407%" y="261" width="0.0197%" height="15" fill="rgb(249,195,6)" fg:x="3611" fg:w="1"/><text x="71.2907%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="71.0407%" y="245" width="0.0197%" height="15" fill="rgb(237,174,47)" fg:x="3611" fg:w="1"/><text x="71.2907%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="71.0407%" y="229" width="0.0197%" height="15" fill="rgb(206,201,31)" fg:x="3611" fg:w="1"/><text x="71.2907%" y="239.50"></text></g><g><title>run`std::sys::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="71.0604%" y="293" width="0.0197%" height="15" fill="rgb(231,57,52)" fg:x="3612" fg:w="1"/><text x="71.3104%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="71.1194%" y="277" width="0.0197%" height="15" fill="rgb(248,177,22)" fg:x="3615" fg:w="1"/><text x="71.3694%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="71.1194%" y="261" width="0.0197%" height="15" fill="rgb(215,211,37)" fg:x="3615" fg:w="1"/><text x="71.3694%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="71.1194%" y="245" width="0.0197%" height="15" fill="rgb(241,128,51)" fg:x="3615" fg:w="1"/><text x="71.3694%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="71.1194%" y="229" width="0.0197%" height="15" fill="rgb(227,165,31)" fg:x="3615" fg:w="1"/><text x="71.3694%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_attr_destroy (1 samples, 0.02%)</title><rect x="71.1391%" y="277" width="0.0197%" height="15" fill="rgb(228,167,24)" fg:x="3616" fg:w="1"/><text x="71.3891%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_attr_setstacksize (1 samples, 0.02%)</title><rect x="71.1588%" y="277" width="0.0197%" height="15" fill="rgb(228,143,12)" fg:x="3617" fg:w="1"/><text x="71.4088%" y="287.50"></text></g><g><title>run`std::io::stdio::set_output_capture (1 samples, 0.02%)</title><rect x="71.1784%" y="277" width="0.0197%" height="15" fill="rgb(249,149,8)" fg:x="3618" fg:w="1"/><text x="71.4284%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (93 samples, 1.83%)</title><rect x="71.2571%" y="261" width="1.8296%" height="15" fill="rgb(243,35,44)" fg:x="3622" fg:w="93"/><text x="71.5071%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="73.0868%" y="261" width="0.0393%" height="15" fill="rgb(246,89,9)" fg:x="3715" fg:w="2"/><text x="73.3368%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="73.0868%" y="245" width="0.0393%" height="15" fill="rgb(233,213,13)" fg:x="3715" fg:w="2"/><text x="73.3368%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="73.0868%" y="229" width="0.0393%" height="15" fill="rgb(233,141,41)" fg:x="3715" fg:w="2"/><text x="73.3368%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="73.0868%" y="213" width="0.0393%" height="15" fill="rgb(239,167,4)" fg:x="3715" fg:w="2"/><text x="73.3368%" y="223.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock_no_tsd (1 samples, 0.02%)</title><rect x="73.1261%" y="261" width="0.0197%" height="15" fill="rgb(209,217,16)" fg:x="3717" fg:w="1"/><text x="73.3761%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$mach_vm_map (1 samples, 0.02%)</title><rect x="73.1458%" y="261" width="0.0197%" height="15" fill="rgb(219,88,35)" fg:x="3718" fg:w="1"/><text x="73.3958%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (48 samples, 0.94%)</title><rect x="74.4049%" y="245" width="0.9443%" height="15" fill="rgb(220,193,23)" fg:x="3782" fg:w="48"/><text x="74.6549%" y="255.50"></text></g><g><title>run`std::sys::unix::thread::Thread::new (234 samples, 4.60%)</title><rect x="71.1981%" y="277" width="4.6036%" height="15" fill="rgb(230,90,52)" fg:x="3619" fg:w="234"/><text x="71.4481%" y="287.50">run`s..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (134 samples, 2.64%)</title><rect x="73.1655%" y="261" width="2.6362%" height="15" fill="rgb(252,106,19)" fg:x="3719" fg:w="134"/><text x="73.4155%" y="271.50">li..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (23 samples, 0.45%)</title><rect x="75.3492%" y="245" width="0.4525%" height="15" fill="rgb(206,74,20)" fg:x="3830" fg:w="23"/><text x="75.5992%" y="255.50"></text></g><g><title>run`std::sys_common::thread::min_stack (1 samples, 0.02%)</title><rect x="75.8017%" y="277" width="0.0197%" height="15" fill="rgb(230,138,44)" fg:x="3853" fg:w="1"/><text x="76.0517%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.08%)</title><rect x="75.8214%" y="261" width="0.0787%" height="15" fill="rgb(235,182,43)" fg:x="3854" fg:w="4"/><text x="76.0714%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.08%)</title><rect x="75.8214%" y="245" width="0.0787%" height="15" fill="rgb(242,16,51)" fg:x="3854" fg:w="4"/><text x="76.0714%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.08%)</title><rect x="75.8214%" y="229" width="0.0787%" height="15" fill="rgb(248,9,4)" fg:x="3854" fg:w="4"/><text x="76.0714%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="75.8410%" y="213" width="0.0590%" height="15" fill="rgb(210,31,22)" fg:x="3855" fg:w="3"/><text x="76.0910%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (1 samples, 0.02%)</title><rect x="75.9001%" y="261" width="0.0197%" height="15" fill="rgb(239,54,39)" fg:x="3858" fg:w="1"/><text x="76.1501%" y="271.50"></text></g><g><title>run`&lt;rusty_junctions::patterns::unary::SendJoinPattern as rusty_junctions::join_pattern::JoinPattern&gt;::fire (252 samples, 4.96%)</title><rect x="71.0014%" y="309" width="4.9577%" height="15" fill="rgb(230,99,41)" fg:x="3609" fg:w="252"/><text x="71.2514%" y="319.50">run`&lt;r..</text></g><g><title>run`std::thread::spawn (248 samples, 4.88%)</title><rect x="71.0801%" y="293" width="4.8790%" height="15" fill="rgb(253,106,12)" fg:x="3613" fg:w="248"/><text x="71.3301%" y="303.50">run`st..</text></g><g><title>run`std::thread::Thread::new (7 samples, 0.14%)</title><rect x="75.8214%" y="277" width="0.1377%" height="15" fill="rgb(213,46,41)" fg:x="3854" fg:w="7"/><text x="76.0714%" y="287.50"></text></g><g><title>run`std::sys_common::mutex::MovableMutex::new (2 samples, 0.04%)</title><rect x="75.9197%" y="261" width="0.0393%" height="15" fill="rgb(215,133,35)" fg:x="3859" fg:w="2"/><text x="76.1697%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="75.9197%" y="245" width="0.0393%" height="15" fill="rgb(213,28,5)" fg:x="3859" fg:w="2"/><text x="76.1697%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="75.9197%" y="229" width="0.0393%" height="15" fill="rgb(215,77,49)" fg:x="3859" fg:w="2"/><text x="76.1697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="75.9197%" y="213" width="0.0393%" height="15" fill="rgb(248,100,22)" fg:x="3859" fg:w="2"/><text x="76.1697%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="75.9197%" y="197" width="0.0393%" height="15" fill="rgb(208,67,9)" fg:x="3859" fg:w="2"/><text x="76.1697%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="75.9591%" y="293" width="0.0197%" height="15" fill="rgb(219,133,21)" fg:x="3861" fg:w="1"/><text x="76.2091%" y="303.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.12%)</title><rect x="75.9591%" y="309" width="0.1180%" height="15" fill="rgb(246,46,29)" fg:x="3861" fg:w="6"/><text x="76.2091%" y="319.50"></text></g><g><title>run`alloc::raw_vec::finish_grow (5 samples, 0.10%)</title><rect x="75.9788%" y="293" width="0.0984%" height="15" fill="rgb(246,185,52)" fg:x="3862" fg:w="5"/><text x="76.2288%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.10%)</title><rect x="75.9788%" y="277" width="0.0984%" height="15" fill="rgb(252,136,11)" fg:x="3862" fg:w="5"/><text x="76.2288%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.10%)</title><rect x="75.9788%" y="261" width="0.0984%" height="15" fill="rgb(219,138,53)" fg:x="3862" fg:w="5"/><text x="76.2288%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.10%)</title><rect x="75.9788%" y="245" width="0.0984%" height="15" fill="rgb(211,51,23)" fg:x="3862" fg:w="5"/><text x="76.2288%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="76.0181%" y="229" width="0.0590%" height="15" fill="rgb(247,221,28)" fg:x="3864" fg:w="3"/><text x="76.2681%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="76.7854%" y="293" width="0.0197%" height="15" fill="rgb(251,222,45)" fg:x="3903" fg:w="1"/><text x="77.0354%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="76.7854%" y="277" width="0.0197%" height="15" fill="rgb(217,162,53)" fg:x="3903" fg:w="1"/><text x="77.0354%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (19 samples, 0.37%)</title><rect x="76.8444%" y="229" width="0.3738%" height="15" fill="rgb(229,93,14)" fg:x="3906" fg:w="19"/><text x="77.0944%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_detach (22 samples, 0.43%)</title><rect x="76.8050%" y="277" width="0.4328%" height="15" fill="rgb(209,67,49)" fg:x="3904" fg:w="22"/><text x="77.0550%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (21 samples, 0.41%)</title><rect x="76.8247%" y="261" width="0.4131%" height="15" fill="rgb(213,87,29)" fg:x="3905" fg:w="21"/><text x="77.0747%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (20 samples, 0.39%)</title><rect x="76.8444%" y="245" width="0.3935%" height="15" fill="rgb(205,151,52)" fg:x="3906" fg:w="20"/><text x="77.0944%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_deallocate (1 samples, 0.02%)</title><rect x="77.2182%" y="229" width="0.0197%" height="15" fill="rgb(253,215,39)" fg:x="3925" fg:w="1"/><text x="77.4682%" y="239.50"></text></g><g><title>run`alloc::vec::Vec&lt;T,A&gt;::retain (62 samples, 1.22%)</title><rect x="76.0771%" y="309" width="1.2198%" height="15" fill="rgb(221,220,41)" fg:x="3867" fg:w="62"/><text x="76.3271%" y="319.50"></text></g><g><title>run`core::ptr::drop_in_place&lt;std::thread::JoinHandle&lt;()&gt;&gt; (25 samples, 0.49%)</title><rect x="76.8050%" y="293" width="0.4918%" height="15" fill="rgb(218,133,21)" fg:x="3904" fg:w="25"/><text x="77.0550%" y="303.50"></text></g><g><title>run`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.06%)</title><rect x="77.2379%" y="277" width="0.0590%" height="15" fill="rgb(221,193,43)" fg:x="3926" fg:w="3"/><text x="77.4879%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="77.2575%" y="261" width="0.0393%" height="15" fill="rgb(240,128,52)" fg:x="3927" fg:w="2"/><text x="77.5075%" y="271.50"></text></g><g><title>run`bag::Bag&lt;K,V&gt;::add (13 samples, 0.26%)</title><rect x="77.2969%" y="309" width="0.2558%" height="15" fill="rgb(253,114,12)" fg:x="3929" fg:w="13"/><text x="77.5469%" y="319.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (10 samples, 0.20%)</title><rect x="77.3559%" y="293" width="0.1967%" height="15" fill="rgb(215,223,47)" fg:x="3932" fg:w="10"/><text x="77.6059%" y="303.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="77.5526%" y="309" width="0.0393%" height="15" fill="rgb(248,225,23)" fg:x="3942" fg:w="2"/><text x="77.8026%" y="319.50"></text></g><g><title>run`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.12%)</title><rect x="77.5920%" y="309" width="0.1180%" height="15" fill="rgb(250,108,0)" fg:x="3944" fg:w="6"/><text x="77.8420%" y="319.50"></text></g><g><title>run`core::hash::BuildHasher::hash_one (2 samples, 0.04%)</title><rect x="77.6707%" y="293" width="0.0393%" height="15" fill="rgb(228,208,7)" fg:x="3948" fg:w="2"/><text x="77.9207%" y="303.50"></text></g><g><title>run`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.02%)</title><rect x="77.6903%" y="277" width="0.0197%" height="15" fill="rgb(244,45,10)" fg:x="3949" fg:w="1"/><text x="77.9403%" y="287.50"></text></g><g><title>run`__rdl_dealloc (2 samples, 0.04%)</title><rect x="77.7494%" y="277" width="0.0393%" height="15" fill="rgb(207,125,25)" fg:x="3952" fg:w="2"/><text x="77.9994%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="77.8084%" y="261" width="0.0197%" height="15" fill="rgb(210,195,18)" fg:x="3955" fg:w="1"/><text x="78.0584%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (43 samples, 0.85%)</title><rect x="77.8477%" y="245" width="0.8460%" height="15" fill="rgb(249,80,12)" fg:x="3957" fg:w="43"/><text x="78.0977%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (5 samples, 0.10%)</title><rect x="78.6937%" y="245" width="0.0984%" height="15" fill="rgb(221,65,9)" fg:x="4000" fg:w="5"/><text x="78.9437%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvclrprepost (1 samples, 0.02%)</title><rect x="78.7724%" y="229" width="0.0197%" height="15" fill="rgb(235,49,36)" fg:x="4004" fg:w="1"/><text x="79.0224%" y="239.50"></text></g><g><title>run`std::sync::mpsc::blocking::WaitToken::wait (52 samples, 1.02%)</title><rect x="77.7887%" y="277" width="1.0230%" height="15" fill="rgb(225,32,20)" fg:x="3954" fg:w="52"/><text x="78.0387%" y="287.50"></text></g><g><title>run`std::thread::park (50 samples, 0.98%)</title><rect x="77.8281%" y="261" width="0.9837%" height="15" fill="rgb(215,141,46)" fg:x="3956" fg:w="50"/><text x="78.0781%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="78.7921%" y="245" width="0.0197%" height="15" fill="rgb(250,160,47)" fg:x="4005" fg:w="1"/><text x="79.0421%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="78.8117%" y="261" width="0.0197%" height="15" fill="rgb(216,222,40)" fg:x="4006" fg:w="1"/><text x="79.0617%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="78.8117%" y="245" width="0.0197%" height="15" fill="rgb(234,217,39)" fg:x="4006" fg:w="1"/><text x="79.0617%" y="255.50"></text></g><g><title>run`std::sync::mpsc::blocking::tokens (2 samples, 0.04%)</title><rect x="78.8117%" y="277" width="0.0393%" height="15" fill="rgb(207,178,40)" fg:x="4006" fg:w="2"/><text x="79.0617%" y="287.50"></text></g><g><title>run`std::sys_common::thread_info::current_thread (1 samples, 0.02%)</title><rect x="78.8314%" y="261" width="0.0197%" height="15" fill="rgb(221,136,13)" fg:x="4007" fg:w="1"/><text x="79.0814%" y="271.50"></text></g><g><title>run`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="78.8511%" y="277" width="0.0197%" height="15" fill="rgb(249,199,10)" fg:x="4008" fg:w="1"/><text x="79.1011%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="78.9298%" y="229" width="0.0197%" height="15" fill="rgb(249,222,13)" fg:x="4012" fg:w="1"/><text x="79.1798%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="78.9298%" y="245" width="0.0393%" height="15" fill="rgb(244,185,38)" fg:x="4012" fg:w="2"/><text x="79.1798%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="78.9494%" y="229" width="0.0197%" height="15" fill="rgb(236,202,9)" fg:x="4013" fg:w="1"/><text x="79.1994%" y="239.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::recv (65 samples, 1.28%)</title><rect x="77.7100%" y="293" width="1.2788%" height="15" fill="rgb(250,229,37)" fg:x="3950" fg:w="65"/><text x="77.9600%" y="303.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (6 samples, 0.12%)</title><rect x="78.8707%" y="277" width="0.1180%" height="15" fill="rgb(206,174,23)" fg:x="4009" fg:w="6"/><text x="79.1207%" y="287.50"></text></g><g><title>run`std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (6 samples, 0.12%)</title><rect x="78.8707%" y="261" width="0.1180%" height="15" fill="rgb(211,33,43)" fg:x="4009" fg:w="6"/><text x="79.1207%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="78.9691%" y="245" width="0.0197%" height="15" fill="rgb(245,58,50)" fg:x="4014" fg:w="1"/><text x="79.2191%" y="255.50"></text></g><g><title>run`rusty_junctions::controller::handlers::_&lt;impl rusty_junctions::controller::Controller&gt;::handle_packets (712 samples, 14.01%)</title><rect x="65.0010%" y="325" width="14.0075%" height="15" fill="rgb(244,68,36)" fg:x="3304" fg:w="712"/><text x="65.2510%" y="335.50">run`rusty_junctions::..</text></g><g><title>run`std::sync::mpsc::Receiver&lt;T&gt;::recv (66 samples, 1.30%)</title><rect x="77.7100%" y="309" width="1.2984%" height="15" fill="rgb(232,229,15)" fg:x="3950" fg:w="66"/><text x="77.9600%" y="319.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (1 samples, 0.02%)</title><rect x="78.9888%" y="293" width="0.0197%" height="15" fill="rgb(254,30,23)" fg:x="4015" fg:w="1"/><text x="79.2388%" y="303.50"></text></g><g><title>libsystem_c.dylib`nanosleep (1 samples, 0.02%)</title><rect x="79.1462%" y="309" width="0.0197%" height="15" fill="rgb(235,160,14)" fg:x="4023" fg:w="1"/><text x="79.3962%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (99 samples, 1.95%)</title><rect x="79.1658%" y="309" width="1.9477%" height="15" fill="rgb(212,155,44)" fg:x="4024" fg:w="99"/><text x="79.4158%" y="319.50">l..</text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.20%)</title><rect x="81.1135%" y="309" width="0.1967%" height="15" fill="rgb(226,2,50)" fg:x="4123" fg:w="10"/><text x="81.3635%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.18%)</title><rect x="81.1332%" y="293" width="0.1771%" height="15" fill="rgb(234,177,6)" fg:x="4124" fg:w="9"/><text x="81.3832%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.04%)</title><rect x="81.3102%" y="309" width="0.0393%" height="15" fill="rgb(217,24,9)" fg:x="4133" fg:w="2"/><text x="81.5602%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.12%)</title><rect x="81.3496%" y="309" width="0.1180%" height="15" fill="rgb(220,13,46)" fg:x="4135" fg:w="6"/><text x="81.5996%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="81.4676%" y="293" width="0.0590%" height="15" fill="rgb(239,221,27)" fg:x="4141" fg:w="3"/><text x="81.7176%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="81.4873%" y="277" width="0.0393%" height="15" fill="rgb(222,198,25)" fg:x="4142" fg:w="2"/><text x="81.7373%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="81.4873%" y="261" width="0.0393%" height="15" fill="rgb(211,99,13)" fg:x="4142" fg:w="2"/><text x="81.7373%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="81.4873%" y="245" width="0.0393%" height="15" fill="rgb(232,111,31)" fg:x="4142" fg:w="2"/><text x="81.7373%" y="255.50"></text></g><g><title>run`alloc::fmt::format (4 samples, 0.08%)</title><rect x="81.4676%" y="309" width="0.0787%" height="15" fill="rgb(245,82,37)" fg:x="4141" fg:w="4"/><text x="81.7176%" y="319.50"></text></g><g><title>run`core::fmt::write (1 samples, 0.02%)</title><rect x="81.5267%" y="293" width="0.0197%" height="15" fill="rgb(227,149,46)" fg:x="4144" fg:w="1"/><text x="81.7767%" y="303.50"></text></g><g><title>run`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.02%)</title><rect x="81.5267%" y="277" width="0.0197%" height="15" fill="rgb(218,36,50)" fg:x="4144" fg:w="1"/><text x="81.7767%" y="287.50"></text></g><g><title>run`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="81.5267%" y="261" width="0.0197%" height="15" fill="rgb(226,80,48)" fg:x="4144" fg:w="1"/><text x="81.7767%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="81.5267%" y="245" width="0.0197%" height="15" fill="rgb(238,224,15)" fg:x="4144" fg:w="1"/><text x="81.7767%" y="255.50"></text></g><g><title>libsystem_c.dylib`send (1 samples, 0.02%)</title><rect x="81.6054%" y="293" width="0.0197%" height="15" fill="rgb(241,136,10)" fg:x="4148" fg:w="1"/><text x="81.8554%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (114 samples, 2.24%)</title><rect x="81.6250%" y="293" width="2.2428%" height="15" fill="rgb(208,32,45)" fg:x="4149" fg:w="114"/><text x="81.8750%" y="303.50">l..</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="83.8678%" y="293" width="0.0393%" height="15" fill="rgb(207,135,9)" fg:x="4263" fg:w="2"/><text x="84.1178%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="83.8875%" y="277" width="0.0197%" height="15" fill="rgb(206,86,44)" fg:x="4264" fg:w="1"/><text x="84.1375%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="83.9071%" y="277" width="0.0393%" height="15" fill="rgb(245,177,15)" fg:x="4265" fg:w="2"/><text x="84.1571%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="83.9071%" y="261" width="0.0393%" height="15" fill="rgb(206,64,50)" fg:x="4265" fg:w="2"/><text x="84.1571%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="83.9268%" y="245" width="0.0197%" height="15" fill="rgb(234,36,40)" fg:x="4266" fg:w="1"/><text x="84.1768%" y="255.50"></text></g><g><title>run`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="83.9465%" y="277" width="0.0197%" height="15" fill="rgb(213,64,8)" fg:x="4267" fg:w="1"/><text x="84.1965%" y="287.50"></text></g><g><title>run`&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="83.9662%" y="277" width="0.0197%" height="15" fill="rgb(210,75,36)" fg:x="4268" fg:w="1"/><text x="84.2162%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="84.0252%" y="245" width="0.0197%" height="15" fill="rgb(229,88,21)" fg:x="4271" fg:w="1"/><text x="84.2752%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.02%)</title><rect x="84.0842%" y="197" width="0.0197%" height="15" fill="rgb(252,204,47)" fg:x="4274" fg:w="1"/><text x="84.3342%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="84.1235%" y="165" width="0.0393%" height="15" fill="rgb(208,77,27)" fg:x="4276" fg:w="2"/><text x="84.3735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="84.1235%" y="149" width="0.0393%" height="15" fill="rgb(221,76,26)" fg:x="4276" fg:w="2"/><text x="84.3735%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="84.1432%" y="133" width="0.0197%" height="15" fill="rgb(225,139,18)" fg:x="4277" fg:w="1"/><text x="84.3932%" y="143.50"></text></g><g><title>run`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.20%)</title><rect x="83.9858%" y="261" width="0.1967%" height="15" fill="rgb(230,137,11)" fg:x="4269" fg:w="10"/><text x="84.2358%" y="271.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.14%)</title><rect x="84.0449%" y="245" width="0.1377%" height="15" fill="rgb(212,28,1)" fg:x="4272" fg:w="7"/><text x="84.2949%" y="255.50"></text></g><g><title>run`alloc::raw_vec::finish_grow (7 samples, 0.14%)</title><rect x="84.0449%" y="229" width="0.1377%" height="15" fill="rgb(248,164,17)" fg:x="4272" fg:w="7"/><text x="84.2949%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.12%)</title><rect x="84.0645%" y="213" width="0.1180%" height="15" fill="rgb(222,171,42)" fg:x="4273" fg:w="6"/><text x="84.3145%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.08%)</title><rect x="84.1039%" y="197" width="0.0787%" height="15" fill="rgb(243,84,45)" fg:x="4275" fg:w="4"/><text x="84.3539%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.08%)</title><rect x="84.1039%" y="181" width="0.0787%" height="15" fill="rgb(252,49,23)" fg:x="4275" fg:w="4"/><text x="84.3539%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="84.1629%" y="165" width="0.0197%" height="15" fill="rgb(215,19,7)" fg:x="4278" fg:w="1"/><text x="84.4129%" y="175.50"></text></g><g><title>run`rusty_web_server::response::HttpResponse::send (135 samples, 2.66%)</title><rect x="81.5463%" y="309" width="2.6559%" height="15" fill="rgb(238,81,41)" fg:x="4145" fg:w="135"/><text x="81.7963%" y="319.50">ru..</text></g><g><title>run`alloc::fmt::format (15 samples, 0.30%)</title><rect x="83.9071%" y="293" width="0.2951%" height="15" fill="rgb(210,199,37)" fg:x="4265" fg:w="15"/><text x="84.1571%" y="303.50"></text></g><g><title>run`core::fmt::write (11 samples, 0.22%)</title><rect x="83.9858%" y="277" width="0.2164%" height="15" fill="rgb(244,192,49)" fg:x="4269" fg:w="11"/><text x="84.2358%" y="287.50"></text></g><g><title>run`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="84.1826%" y="261" width="0.0197%" height="15" fill="rgb(226,211,11)" fg:x="4279" fg:w="1"/><text x="84.4326%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="84.2809%" y="277" width="0.0197%" height="15" fill="rgb(236,162,54)" fg:x="4284" fg:w="1"/><text x="84.5309%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="84.2809%" y="261" width="0.0197%" height="15" fill="rgb(220,229,9)" fg:x="4284" fg:w="1"/><text x="84.5309%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="84.2809%" y="245" width="0.0197%" height="15" fill="rgb(250,87,22)" fg:x="4284" fg:w="1"/><text x="84.5309%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (21 samples, 0.41%)</title><rect x="84.3006%" y="261" width="0.4131%" height="15" fill="rgb(239,43,17)" fg:x="4285" fg:w="21"/><text x="84.5506%" y="271.50"></text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (27 samples, 0.53%)</title><rect x="84.2022%" y="309" width="0.5312%" height="15" fill="rgb(231,177,25)" fg:x="4280" fg:w="27"/><text x="84.4522%" y="319.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::send (27 samples, 0.53%)</title><rect x="84.2022%" y="293" width="0.5312%" height="15" fill="rgb(219,179,1)" fg:x="4280" fg:w="27"/><text x="84.4522%" y="303.50"></text></g><g><title>run`std::sync::mpsc::blocking::SignalToken::signal (22 samples, 0.43%)</title><rect x="84.3006%" y="277" width="0.4328%" height="15" fill="rgb(238,219,53)" fg:x="4285" fg:w="22"/><text x="84.5506%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.02%)</title><rect x="84.7138%" y="261" width="0.0197%" height="15" fill="rgb(232,167,36)" fg:x="4306" fg:w="1"/><text x="84.9638%" y="271.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__error (1 samples, 0.02%)</title><rect x="84.8318%" y="293" width="0.0197%" height="15" fill="rgb(244,19,51)" fg:x="4312" fg:w="1"/><text x="85.0818%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_pthread_exit_if_canceled (1 samples, 0.02%)</title><rect x="84.8711%" y="277" width="0.0197%" height="15" fill="rgb(224,6,22)" fg:x="4314" fg:w="1"/><text x="85.1211%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (1 samples, 0.02%)</title><rect x="84.8908%" y="277" width="0.0197%" height="15" fill="rgb(224,145,5)" fg:x="4315" fg:w="1"/><text x="85.1408%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.02%)</title><rect x="84.9695%" y="261" width="0.0197%" height="15" fill="rgb(234,130,49)" fg:x="4319" fg:w="1"/><text x="85.2195%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (58 samples, 1.14%)</title><rect x="84.9892%" y="261" width="1.1411%" height="15" fill="rgb(254,6,2)" fg:x="4320" fg:w="58"/><text x="85.2392%" y="271.50"></text></g><g><title>libsystem_c.dylib`nanosleep (80 samples, 1.57%)</title><rect x="84.8515%" y="293" width="1.5739%" height="15" fill="rgb(208,96,46)" fg:x="4313" fg:w="80"/><text x="85.1015%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (77 samples, 1.51%)</title><rect x="84.9105%" y="277" width="1.5149%" height="15" fill="rgb(239,3,39)" fg:x="4316" fg:w="77"/><text x="85.1605%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_reply_port (15 samples, 0.30%)</title><rect x="86.1302%" y="261" width="0.2951%" height="15" fill="rgb(233,210,1)" fg:x="4378" fg:w="15"/><text x="86.3802%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__error (1 samples, 0.02%)</title><rect x="86.4253%" y="293" width="0.0197%" height="15" fill="rgb(244,137,37)" fg:x="4393" fg:w="1"/><text x="86.6753%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (136 samples, 2.68%)</title><rect x="86.4450%" y="293" width="2.6756%" height="15" fill="rgb(240,136,2)" fg:x="4394" fg:w="136"/><text x="86.6950%" y="303.50">li..</text></g><g><title>run`rusty_junctions::function_transforms::ternary::transform_send::_{{closure}} (515 samples, 10.13%)</title><rect x="79.0085%" y="325" width="10.1318%" height="15" fill="rgb(239,18,37)" fg:x="4016" fg:w="515"/><text x="79.2585%" y="335.50">run`rusty_junct..</text></g><g><title>run`std::thread::sleep (224 samples, 4.41%)</title><rect x="84.7334%" y="309" width="4.4068%" height="15" fill="rgb(218,185,22)" fg:x="4307" fg:w="224"/><text x="84.9834%" y="319.50">run`s..</text></g><g><title>libsystem_kernel.dylib`cerror (1 samples, 0.02%)</title><rect x="89.1206%" y="293" width="0.0197%" height="15" fill="rgb(225,218,4)" fg:x="4530" fg:w="1"/><text x="89.3706%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (2 samples, 0.04%)</title><rect x="89.2386%" y="309" width="0.0393%" height="15" fill="rgb(230,182,32)" fg:x="4536" fg:w="2"/><text x="89.4886%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="89.2780%" y="309" width="0.0590%" height="15" fill="rgb(242,56,43)" fg:x="4538" fg:w="3"/><text x="89.5280%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.06%)</title><rect x="89.2780%" y="293" width="0.0590%" height="15" fill="rgb(233,99,24)" fg:x="4538" fg:w="3"/><text x="89.5280%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.06%)</title><rect x="89.2780%" y="277" width="0.0590%" height="15" fill="rgb(234,209,42)" fg:x="4538" fg:w="3"/><text x="89.5280%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="89.2780%" y="261" width="0.0590%" height="15" fill="rgb(227,7,12)" fg:x="4538" fg:w="3"/><text x="89.5280%" y="271.50"></text></g><g><title>run`core::result::unwrap_failed (1 samples, 0.02%)</title><rect x="89.3370%" y="309" width="0.0197%" height="15" fill="rgb(245,203,43)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="319.50"></text></g><g><title>run`core::panicking::panic_fmt (1 samples, 0.02%)</title><rect x="89.3370%" y="293" width="0.0197%" height="15" fill="rgb(238,205,33)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="303.50"></text></g><g><title>run`rust_begin_unwind (1 samples, 0.02%)</title><rect x="89.3370%" y="277" width="0.0197%" height="15" fill="rgb(231,56,7)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="287.50"></text></g><g><title>run`std::sys_common::backtrace::__rust_end_short_backtrace (1 samples, 0.02%)</title><rect x="89.3370%" y="261" width="0.0197%" height="15" fill="rgb(244,186,29)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="271.50"></text></g><g><title>run`std::panicking::begin_panic_handler::_{{closure}} (1 samples, 0.02%)</title><rect x="89.3370%" y="245" width="0.0197%" height="15" fill="rgb(234,111,31)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="255.50"></text></g><g><title>run`std::panicking::rust_panic_with_hook (1 samples, 0.02%)</title><rect x="89.3370%" y="229" width="0.0197%" height="15" fill="rgb(241,149,10)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="239.50"></text></g><g><title>run`std::panicking::default_hook (1 samples, 0.02%)</title><rect x="89.3370%" y="213" width="0.0197%" height="15" fill="rgb(249,206,44)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="223.50"></text></g><g><title>run`std::panicking::default_hook::_{{closure}} (1 samples, 0.02%)</title><rect x="89.3370%" y="197" width="0.0197%" height="15" fill="rgb(251,153,30)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="207.50"></text></g><g><title>run`std::io::Write::write_fmt (1 samples, 0.02%)</title><rect x="89.3370%" y="181" width="0.0197%" height="15" fill="rgb(239,152,38)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="191.50"></text></g><g><title>run`&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="89.3370%" y="165" width="0.0197%" height="15" fill="rgb(249,139,47)" fg:x="4541" fg:w="1"/><text x="89.5870%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="89.3567%" y="293" width="0.0393%" height="15" fill="rgb(244,64,35)" fg:x="4542" fg:w="2"/><text x="89.6067%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="89.3764%" y="277" width="0.0197%" height="15" fill="rgb(216,46,15)" fg:x="4543" fg:w="1"/><text x="89.6264%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="89.3960%" y="277" width="0.0197%" height="15" fill="rgb(250,74,19)" fg:x="4544" fg:w="1"/><text x="89.6460%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="89.4157%" y="277" width="0.0393%" height="15" fill="rgb(249,42,33)" fg:x="4545" fg:w="2"/><text x="89.6657%" y="287.50"></text></g><g><title>run`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="89.4550%" y="277" width="0.0197%" height="15" fill="rgb(242,149,17)" fg:x="4547" fg:w="1"/><text x="89.7050%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="89.4550%" y="261" width="0.0197%" height="15" fill="rgb(244,29,21)" fg:x="4547" fg:w="1"/><text x="89.7050%" y="271.50"></text></g><g><title>run`rusty_web_server::action::Action::from_parsed_http_request (8 samples, 0.16%)</title><rect x="89.3567%" y="309" width="0.1574%" height="15" fill="rgb(220,130,37)" fg:x="4542" fg:w="8"/><text x="89.6067%" y="319.50"></text></g><g><title>run`&lt;rusty_web_server::action::Operation as core::str::traits::FromStr&gt;::from_str (6 samples, 0.12%)</title><rect x="89.3960%" y="293" width="0.1180%" height="15" fill="rgb(211,67,2)" fg:x="4544" fg:w="6"/><text x="89.6460%" y="303.50"></text></g><g><title>run`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.04%)</title><rect x="89.4747%" y="277" width="0.0393%" height="15" fill="rgb(235,68,52)" fg:x="4548" fg:w="2"/><text x="89.7247%" y="287.50"></text></g><g><title>run`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="89.4747%" y="261" width="0.0393%" height="15" fill="rgb(246,142,3)" fg:x="4548" fg:w="2"/><text x="89.7247%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="89.4944%" y="245" width="0.0197%" height="15" fill="rgb(241,25,7)" fg:x="4549" fg:w="1"/><text x="89.7444%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="89.4944%" y="229" width="0.0197%" height="15" fill="rgb(242,119,39)" fg:x="4549" fg:w="1"/><text x="89.7444%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="89.4944%" y="213" width="0.0197%" height="15" fill="rgb(241,98,45)" fg:x="4549" fg:w="1"/><text x="89.7444%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="89.4944%" y="197" width="0.0197%" height="15" fill="rgb(254,28,30)" fg:x="4549" fg:w="1"/><text x="89.7444%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (40 samples, 0.79%)</title><rect x="89.5337%" y="293" width="0.7869%" height="15" fill="rgb(241,142,54)" fg:x="4551" fg:w="40"/><text x="89.7837%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="90.3207%" y="293" width="0.0197%" height="15" fill="rgb(222,85,15)" fg:x="4591" fg:w="1"/><text x="90.5707%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="90.3404%" y="293" width="0.0197%" height="15" fill="rgb(210,85,47)" fg:x="4592" fg:w="1"/><text x="90.5904%" y="303.50"></text></g><g><title>run`httparse::parse_headers_iter_uninit (1 samples, 0.02%)</title><rect x="90.3600%" y="261" width="0.0197%" height="15" fill="rgb(224,206,25)" fg:x="4593" fg:w="1"/><text x="90.6100%" y="271.50"></text></g><g><title>run`rusty_web_server::request::ParsedHttpRequest::from_raw_http_request (49 samples, 0.96%)</title><rect x="89.5141%" y="309" width="0.9640%" height="15" fill="rgb(243,201,19)" fg:x="4550" fg:w="49"/><text x="89.7641%" y="319.50"></text></g><g><title>run`httparse::Request::parse (6 samples, 0.12%)</title><rect x="90.3600%" y="293" width="0.1180%" height="15" fill="rgb(236,59,4)" fg:x="4593" fg:w="6"/><text x="90.6100%" y="303.50"></text></g><g><title>run`httparse::Request::parse_with_uninit_headers (6 samples, 0.12%)</title><rect x="90.3600%" y="277" width="0.1180%" height="15" fill="rgb(254,179,45)" fg:x="4593" fg:w="6"/><text x="90.6100%" y="287.50"></text></g><g><title>run`httparse::simd::runtime::match_uri_vectored (5 samples, 0.10%)</title><rect x="90.3797%" y="261" width="0.0984%" height="15" fill="rgb(226,14,10)" fg:x="4594" fg:w="5"/><text x="90.6297%" y="271.50"></text></g><g><title>run`httparse::simd::avx2::match_url_char_32_avx (5 samples, 0.10%)</title><rect x="90.3797%" y="245" width="0.0984%" height="15" fill="rgb(244,27,41)" fg:x="4594" fg:w="5"/><text x="90.6297%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="90.4781%" y="277" width="0.0590%" height="15" fill="rgb(235,35,32)" fg:x="4599" fg:w="3"/><text x="90.7281%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.06%)</title><rect x="90.4781%" y="261" width="0.0590%" height="15" fill="rgb(218,68,31)" fg:x="4599" fg:w="3"/><text x="90.7281%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.06%)</title><rect x="90.4781%" y="245" width="0.0590%" height="15" fill="rgb(207,120,37)" fg:x="4599" fg:w="3"/><text x="90.7281%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="90.4781%" y="229" width="0.0590%" height="15" fill="rgb(227,98,0)" fg:x="4599" fg:w="3"/><text x="90.7281%" y="239.50"></text></g><g><title>run`std::sync::mpsc::Sender&lt;T&gt;::send (9 samples, 0.18%)</title><rect x="90.4781%" y="309" width="0.1771%" height="15" fill="rgb(207,7,3)" fg:x="4599" fg:w="9"/><text x="90.7281%" y="319.50"></text></g><g><title>run`std::sync::mpsc::shared::Packet&lt;T&gt;::send (9 samples, 0.18%)</title><rect x="90.4781%" y="293" width="0.1771%" height="15" fill="rgb(206,98,19)" fg:x="4599" fg:w="9"/><text x="90.7281%" y="303.50"></text></g><g><title>run`std::sync::mpsc::blocking::SignalToken::signal (6 samples, 0.12%)</title><rect x="90.5371%" y="277" width="0.1180%" height="15" fill="rgb(217,5,26)" fg:x="4602" fg:w="6"/><text x="90.7871%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (6 samples, 0.12%)</title><rect x="90.5371%" y="261" width="0.1180%" height="15" fill="rgb(235,190,38)" fg:x="4602" fg:w="6"/><text x="90.7871%" y="271.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__error (1 samples, 0.02%)</title><rect x="90.6945%" y="293" width="0.0197%" height="15" fill="rgb(247,86,24)" fg:x="4610" fg:w="1"/><text x="90.9445%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`cerror (1 samples, 0.02%)</title><rect x="90.7141%" y="277" width="0.0197%" height="15" fill="rgb(205,101,16)" fg:x="4611" fg:w="1"/><text x="90.9641%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit_if_canceled (1 samples, 0.02%)</title><rect x="90.7141%" y="261" width="0.0197%" height="15" fill="rgb(246,168,33)" fg:x="4611" fg:w="1"/><text x="90.9641%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`cerror_nocancel (2 samples, 0.04%)</title><rect x="90.7338%" y="277" width="0.0393%" height="15" fill="rgb(231,114,1)" fg:x="4612" fg:w="2"/><text x="90.9838%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (35 samples, 0.69%)</title><rect x="90.7928%" y="261" width="0.6886%" height="15" fill="rgb(207,184,53)" fg:x="4615" fg:w="35"/><text x="91.0428%" y="271.50"></text></g><g><title>libsystem_c.dylib`nanosleep (56 samples, 1.10%)</title><rect x="90.7141%" y="293" width="1.1017%" height="15" fill="rgb(224,95,51)" fg:x="4611" fg:w="56"/><text x="90.9641%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (53 samples, 1.04%)</title><rect x="90.7732%" y="277" width="1.0427%" height="15" fill="rgb(212,188,45)" fg:x="4614" fg:w="53"/><text x="91.0232%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_reply_port (17 samples, 0.33%)</title><rect x="91.4814%" y="261" width="0.3344%" height="15" fill="rgb(223,154,38)" fg:x="4650" fg:w="17"/><text x="91.7314%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__error (1 samples, 0.02%)</title><rect x="91.8159%" y="293" width="0.0197%" height="15" fill="rgb(251,22,52)" fg:x="4667" fg:w="1"/><text x="92.0659%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (241 samples, 4.74%)</title><rect x="91.8355%" y="293" width="4.7413%" height="15" fill="rgb(229,209,22)" fg:x="4668" fg:w="241"/><text x="92.0855%" y="303.50">libsys..</text></g><g><title>libsystem_kernel.dylib`cerror (7 samples, 0.14%)</title><rect x="96.5768%" y="293" width="0.1377%" height="15" fill="rgb(234,138,34)" fg:x="4909" fg:w="7"/><text x="96.8268%" y="303.50"></text></g><g><title>run`std::sys_common::backtrace::__rust_begin_short_backtrace (1,700 samples, 33.44%)</title><rect x="63.2894%" y="341" width="33.4448%" height="15" fill="rgb(212,95,11)" fg:x="3217" fg:w="1700"/><text x="63.5394%" y="351.50">run`std::sys_common::backtrace::__rust_begin_short_bac..</text></g><g><title>run`rusty_junctions::function_transforms::unary::transform_send::_{{closure}} (386 samples, 7.59%)</title><rect x="89.1403%" y="325" width="7.5939%" height="15" fill="rgb(240,179,47)" fg:x="4531" fg:w="386"/><text x="89.3903%" y="335.50">run`rusty_..</text></g><g><title>run`std::thread::sleep (309 samples, 6.08%)</title><rect x="90.6551%" y="309" width="6.0791%" height="15" fill="rgb(240,163,11)" fg:x="4608" fg:w="309"/><text x="90.9051%" y="319.50">run`std:..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.02%)</title><rect x="96.7145%" y="293" width="0.0197%" height="15" fill="rgb(236,37,12)" fg:x="4916" fg:w="1"/><text x="96.9645%" y="303.50"></text></g><g><title>dyld`dyld4::RuntimeState::addTLVTerminationFunc(void (*) (7 samples, 0.14%)</title><rect x="96.7342%" y="325" width="0.1377%" height="15" fill="rgb(232,164,16)" fg:x="4917" fg:w="7"/><text x="96.9842%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.10%)</title><rect x="96.7736%" y="309" width="0.0984%" height="15" fill="rgb(244,205,15)" fg:x="4919" fg:w="5"/><text x="97.0236%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.10%)</title><rect x="96.7736%" y="293" width="0.0984%" height="15" fill="rgb(223,117,47)" fg:x="4919" fg:w="5"/><text x="97.0236%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.10%)</title><rect x="96.7736%" y="277" width="0.0984%" height="15" fill="rgb(244,107,35)" fg:x="4919" fg:w="5"/><text x="97.0236%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.10%)</title><rect x="96.7736%" y="261" width="0.0984%" height="15" fill="rgb(205,140,8)" fg:x="4919" fg:w="5"/><text x="97.0236%" y="271.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::malloc (1 samples, 0.02%)</title><rect x="96.8719%" y="325" width="0.0197%" height="15" fill="rgb(228,84,46)" fg:x="4924" fg:w="1"/><text x="97.1219%" y="335.50"></text></g><g><title>dyld`memmove (2 samples, 0.04%)</title><rect x="97.0883%" y="293" width="0.0393%" height="15" fill="rgb(254,188,9)" fg:x="4935" fg:w="2"/><text x="97.3383%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.12%)</title><rect x="97.1277%" y="293" width="0.1180%" height="15" fill="rgb(206,112,54)" fg:x="4937" fg:w="6"/><text x="97.3777%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.10%)</title><rect x="97.1474%" y="277" width="0.0984%" height="15" fill="rgb(216,84,49)" fg:x="4938" fg:w="5"/><text x="97.3974%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.10%)</title><rect x="97.1474%" y="261" width="0.0984%" height="15" fill="rgb(214,194,35)" fg:x="4938" fg:w="5"/><text x="97.3974%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.10%)</title><rect x="97.1474%" y="245" width="0.0984%" height="15" fill="rgb(249,28,3)" fg:x="4938" fg:w="5"/><text x="97.3974%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.04%)</title><rect x="97.2457%" y="293" width="0.0393%" height="15" fill="rgb(222,56,52)" fg:x="4943" fg:w="2"/><text x="97.4957%" y="303.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (11 samples, 0.22%)</title><rect x="97.0883%" y="309" width="0.2164%" height="15" fill="rgb(245,217,50)" fg:x="4935" fg:w="11"/><text x="97.3383%" y="319.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_recursive_lock_lock_with_options (1 samples, 0.02%)</title><rect x="97.2851%" y="293" width="0.0197%" height="15" fill="rgb(213,201,24)" fg:x="4945" fg:w="1"/><text x="97.5351%" y="303.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::pthread_setspecific (1 samples, 0.02%)</title><rect x="97.3047%" y="309" width="0.0197%" height="15" fill="rgb(248,116,28)" fg:x="4946" fg:w="1"/><text x="97.5547%" y="319.50"></text></g><g><title>libdyld.dylib`instantiateTLVs_thunk (1 samples, 0.02%)</title><rect x="97.3244%" y="309" width="0.0197%" height="15" fill="rgb(219,72,43)" fg:x="4947" fg:w="1"/><text x="97.5744%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.47%)</title><rect x="96.8916%" y="325" width="0.4722%" height="15" fill="rgb(209,138,14)" fg:x="4925" fg:w="24"/><text x="97.1416%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_setspecific (1 samples, 0.02%)</title><rect x="97.3441%" y="309" width="0.0197%" height="15" fill="rgb(222,18,33)" fg:x="4948" fg:w="1"/><text x="97.5941%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.20%)</title><rect x="97.3638%" y="325" width="0.1967%" height="15" fill="rgb(213,199,7)" fg:x="4949" fg:w="10"/><text x="97.6138%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.18%)</title><rect x="97.3834%" y="309" width="0.1771%" height="15" fill="rgb(250,110,10)" fg:x="4950" fg:w="9"/><text x="97.6334%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.16%)</title><rect x="97.4031%" y="293" width="0.1574%" height="15" fill="rgb(248,123,6)" fg:x="4951" fg:w="8"/><text x="97.6531%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.14%)</title><rect x="97.4228%" y="277" width="0.1377%" height="15" fill="rgb(206,91,31)" fg:x="4952" fg:w="7"/><text x="97.6728%" y="287.50"></text></g><g><title>run`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,782 samples, 35.06%)</title><rect x="62.5812%" y="357" width="35.0580%" height="15" fill="rgb(211,154,13)" fg:x="3181" fg:w="1782"/><text x="62.8312%" y="367.50">run`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>run`std::sys_common::thread_info::set (46 samples, 0.90%)</title><rect x="96.7342%" y="341" width="0.9050%" height="15" fill="rgb(225,148,7)" fg:x="4917" fg:w="46"/><text x="96.9842%" y="351.50"></text></g><g><title>run`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.08%)</title><rect x="97.5605%" y="325" width="0.0787%" height="15" fill="rgb(220,160,43)" fg:x="4959" fg:w="4"/><text x="97.8105%" y="335.50"></text></g><g><title>run`alloc::raw_vec::finish_grow (4 samples, 0.08%)</title><rect x="97.5605%" y="309" width="0.0787%" height="15" fill="rgb(213,52,39)" fg:x="4959" fg:w="4"/><text x="97.8105%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.08%)</title><rect x="97.5605%" y="293" width="0.0787%" height="15" fill="rgb(243,137,7)" fg:x="4959" fg:w="4"/><text x="97.8105%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.08%)</title><rect x="97.5605%" y="277" width="0.0787%" height="15" fill="rgb(230,79,13)" fg:x="4959" fg:w="4"/><text x="97.8105%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.08%)</title><rect x="97.5605%" y="261" width="0.0787%" height="15" fill="rgb(247,105,23)" fg:x="4959" fg:w="4"/><text x="97.8105%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="97.5802%" y="245" width="0.0590%" height="15" fill="rgb(223,179,41)" fg:x="4960" fg:w="3"/><text x="97.8302%" y="255.50"></text></g><g><title>libsystem_c.dylib`sigaltstack (1 samples, 0.02%)</title><rect x="98.0720%" y="341" width="0.0197%" height="15" fill="rgb(218,9,34)" fg:x="4985" fg:w="1"/><text x="98.3220%" y="351.50"></text></g><g><title>libsystem_c.dylib`sysconf (2 samples, 0.04%)</title><rect x="98.0917%" y="341" width="0.0393%" height="15" fill="rgb(222,106,8)" fg:x="4986" fg:w="2"/><text x="98.3417%" y="351.50"></text></g><g><title>libsystem_c.dylib`getpagesize (2 samples, 0.04%)</title><rect x="98.0917%" y="325" width="0.0393%" height="15" fill="rgb(211,220,0)" fg:x="4986" fg:w="2"/><text x="98.3417%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (92 samples, 1.81%)</title><rect x="98.1310%" y="341" width="1.8100%" height="15" fill="rgb(229,52,16)" fg:x="4988" fg:w="92"/><text x="98.3810%" y="351.50">l..</text></g><g><title>run`std::sys::unix::stack_overflow::imp::make_handler (118 samples, 2.32%)</title><rect x="97.6392%" y="357" width="2.3215%" height="15" fill="rgb(212,155,18)" fg:x="4963" fg:w="118"/><text x="97.8892%" y="367.50">r..</text></g><g><title>libsystem_kernel.dylib`mmap (1 samples, 0.02%)</title><rect x="99.9410%" y="341" width="0.0197%" height="15" fill="rgb(242,21,14)" fg:x="5080" fg:w="1"/><text x="100.1910%" y="351.50"></text></g><g><title>run`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="99.9607%" y="357" width="0.0197%" height="15" fill="rgb(222,19,48)" fg:x="5081" fg:w="1"/><text x="100.2107%" y="367.50"></text></g><g><title>all (5,083 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(232,45,27)" fg:x="0" fg:w="5083"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (4,663 samples, 91.74%)</title><rect x="8.2628%" y="405" width="91.7372%" height="15" fill="rgb(249,103,42)" fg:x="420" fg:w="4663"/><text x="8.5128%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (4,424 samples, 87.04%)</title><rect x="12.9648%" y="389" width="87.0352%" height="15" fill="rgb(246,81,33)" fg:x="659" fg:w="4424"/><text x="13.2148%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>run`std::sys::unix::thread::Thread::new::thread_start (2,040 samples, 40.13%)</title><rect x="59.8662%" y="373" width="40.1338%" height="15" fill="rgb(252,33,42)" fg:x="3043" fg:w="2040"/><text x="60.1162%" y="383.50">run`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>run`std::sys_common::thread_info::set (1 samples, 0.02%)</title><rect x="99.9803%" y="357" width="0.0197%" height="15" fill="rgb(209,212,41)" fg:x="5082" fg:w="1"/><text x="100.2303%" y="367.50"></text></g></svg></svg>